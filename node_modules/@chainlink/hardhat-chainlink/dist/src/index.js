"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const plugins_1 = require("hardhat/plugins");
require("./type-extensions");
const argumentTypes_1 = require("hardhat/internal/core/params/argumentTypes");
const HardhatChainlink_1 = require("./HardhatChainlink");
const run_node_1 = require("./tasks/run-node");
const create_job_1 = require("./tasks/create-job");
const deploy_link_token_1 = require("./tasks/deploy-link-token");
const deploy_oracle_1 = require("./tasks/deploy-oracle");
const fund_1 = require("./tasks/fund");
const node_info_1 = require("./tasks/node-info");
(0, config_1.extendConfig)((config, userConfig) => { });
(0, config_1.extendEnvironment)((hre) => {
    hre.chainlink = (0, plugins_1.lazyObject)(() => new HardhatChainlink_1.HardhatChainlink(hre));
});
(0, config_1.task)('chainlink:run-node', 'Runs the chainlink node')
    .addOptionalPositionalParam('restartOnly', 'Restart the existing containers instead of removing and recreating them', false, argumentTypes_1.boolean)
    .setAction(run_node_1.runNode);
(0, config_1.task)('chainlink:create-job', 'Creates the job')
    .addPositionalParam('oracleAddress', 'Address of Oracle')
    .addOptionalPositionalParam('jobType', 'direct or cron', 'direct')
    .setAction(create_job_1.createJob);
(0, config_1.task)('chainlink:deploy-link', 'Deploys the Link token into a running node').setAction(deploy_link_token_1.deployLinkToken);
(0, config_1.task)('chainlink:deploy-oracle', 'Deploys the oracle')
    .addPositionalParam('nodeAddress', 'The node address')
    .addPositionalParam('linkAddress', 'The Link token address')
    .setAction(deploy_oracle_1.deployOracle);
(0, config_1.task)('chainlink:fund-eth', 'Funds the node with ETH')
    .addPositionalParam('nodeAddress', 'The node address')
    .addPositionalParam('amount', 'Amount to fund')
    .setAction(fund_1.fundEth);
(0, config_1.task)('chainlink:fund-link', 'Funds the node with LINK')
    .addPositionalParam('linkAddress', 'The link token address')
    .addPositionalParam('contractAddress', 'The consumer contract address')
    .setAction(fund_1.fundLink);
(0, config_1.task)('chainlink:node-info', 'Get node info').setAction(node_info_1.nodeInfo);
//# sourceMappingURL=index.js.map