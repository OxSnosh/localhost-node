import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { KeeperRegistryAbi, KeeperRegistryAbiInterface } from "../KeeperRegistryAbi";
export declare class KeeperRegistryAbi__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "link";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "linkEthFeed";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "fastGasFeed";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "paymentPremiumPPB";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "flatFeeMicroLink";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "blockCountPerTurn";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint32";
                readonly name: "checkGasLimit";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "stalenessSeconds";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint16";
                readonly name: "gasCeilingMultiplier";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint96";
                readonly name: "minUpkeepSpend";
                readonly type: "uint96";
            }, {
                readonly internalType: "uint32";
                readonly name: "maxPerformGas";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackGasPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackLinkPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "transcoder";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "registrar";
                readonly type: "address";
            }];
            readonly internalType: "struct Config";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ArrayHasNoEntries";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CannotCancel";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DuplicateEntry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GasLimitCanOnlyIncrease";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GasLimitOutsideRange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IndexOutOfRange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientFunds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidDataLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPayee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRecipient";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "KeepersMustTakeTurns";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MigrationNotPermitted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotAContract";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyActiveKeepers";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyCallableByAdmin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyCallableByLINKToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyCallableByOwnerOrAdmin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyCallableByOwnerOrRegistrar";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyCallableByPayee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyCallableByProposedPayee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySimulatedBackend";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ParameterLengthError";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PaymentGreaterThanAllLINK";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "TargetCheckReverted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TranscoderNotSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UpkeepNotActive";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UpkeepNotCanceled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UpkeepNotNeeded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ValueNotChanged";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "paymentPremiumPPB";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "flatFeeMicroLink";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "blockCountPerTurn";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint32";
                readonly name: "checkGasLimit";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "stalenessSeconds";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint16";
                readonly name: "gasCeilingMultiplier";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint96";
                readonly name: "minUpkeepSpend";
                readonly type: "uint96";
            }, {
                readonly internalType: "uint32";
                readonly name: "maxPerformGas";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackGasPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackLinkPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "transcoder";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "registrar";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct Config";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint96";
            readonly name: "amount";
            readonly type: "uint96";
        }];
        readonly name: "FundsAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "FundsWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "keepers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "payees";
            readonly type: "address[]";
        }];
        readonly name: "KeepersUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint96";
            readonly name: "amount";
            readonly type: "uint96";
        }];
        readonly name: "OwnerFundsWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "keeper";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "PayeeshipTransferRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "keeper";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "PayeeshipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "keeper";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "payee";
            readonly type: "address";
        }];
        readonly name: "PaymentWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "atBlockHeight";
            readonly type: "uint64";
        }];
        readonly name: "UpkeepCanceled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint96";
            readonly name: "gasLimit";
            readonly type: "uint96";
        }];
        readonly name: "UpkeepGasLimitSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "remainingBalance";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "destination";
            readonly type: "address";
        }];
        readonly name: "UpkeepMigrated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint96";
            readonly name: "payment";
            readonly type: "uint96";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "performData";
            readonly type: "bytes";
        }];
        readonly name: "UpkeepPerformed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "startingBalance";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "importedFrom";
            readonly type: "address";
        }];
        readonly name: "UpkeepReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "executeGas";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "admin";
            readonly type: "address";
        }];
        readonly name: "UpkeepRegistered";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "FAST_GAS_FEED";
        readonly outputs: readonly [{
            readonly internalType: "contract AggregatorV3Interface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "LINK";
        readonly outputs: readonly [{
            readonly internalType: "contract LinkTokenInterface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "LINK_ETH_FEED";
        readonly outputs: readonly [{
            readonly internalType: "contract AggregatorV3Interface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "keeper";
            readonly type: "address";
        }];
        readonly name: "acceptPayeeship";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint96";
            readonly name: "amount";
            readonly type: "uint96";
        }];
        readonly name: "addFunds";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }];
        readonly name: "cancelUpkeep";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }];
        readonly name: "checkUpkeep";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "performData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxLinkPayment";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "gasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "adjustedGasWei";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "linkEth";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "startIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxCount";
            readonly type: "uint256";
        }];
        readonly name: "getActiveUpkeepIDs";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "query";
            readonly type: "address";
        }];
        readonly name: "getKeeperInfo";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "payee";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }, {
            readonly internalType: "uint96";
            readonly name: "balance";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "getMaxPaymentForGas";
        readonly outputs: readonly [{
            readonly internalType: "uint96";
            readonly name: "maxPayment";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }];
        readonly name: "getMinBalanceForUpkeep";
        readonly outputs: readonly [{
            readonly internalType: "uint96";
            readonly name: "minBalance";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "peer";
            readonly type: "address";
        }];
        readonly name: "getPeerRegistryMigrationPermission";
        readonly outputs: readonly [{
            readonly internalType: "enum KeeperRegistry.MigrationPermission";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getState";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "nonce";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint96";
                readonly name: "ownerLinkBalance";
                readonly type: "uint96";
            }, {
                readonly internalType: "uint256";
                readonly name: "expectedLinkBalance";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "numUpkeeps";
                readonly type: "uint256";
            }];
            readonly internalType: "struct State";
            readonly name: "state";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "paymentPremiumPPB";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "flatFeeMicroLink";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "blockCountPerTurn";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint32";
                readonly name: "checkGasLimit";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "stalenessSeconds";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint16";
                readonly name: "gasCeilingMultiplier";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint96";
                readonly name: "minUpkeepSpend";
                readonly type: "uint96";
            }, {
                readonly internalType: "uint32";
                readonly name: "maxPerformGas";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackGasPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackLinkPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "transcoder";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "registrar";
                readonly type: "address";
            }];
            readonly internalType: "struct Config";
            readonly name: "config";
            readonly type: "tuple";
        }, {
            readonly internalType: "address[]";
            readonly name: "keepers";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }];
        readonly name: "getUpkeep";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "executeGas";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "checkData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint96";
            readonly name: "balance";
            readonly type: "uint96";
        }, {
            readonly internalType: "address";
            readonly name: "lastKeeper";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "admin";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "maxValidBlocknumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint96";
            readonly name: "amountSpent";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "ids";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "address";
            readonly name: "destination";
            readonly type: "address";
        }];
        readonly name: "migrateUpkeeps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "onTokenTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "performData";
            readonly type: "bytes";
        }];
        readonly name: "performUpkeep";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedUpkeeps";
            readonly type: "bytes";
        }];
        readonly name: "receiveUpkeeps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "recoverFunds";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "gasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "admin";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "checkData";
            readonly type: "bytes";
        }];
        readonly name: "registerUpkeep";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "paymentPremiumPPB";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "flatFeeMicroLink";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "blockCountPerTurn";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint32";
                readonly name: "checkGasLimit";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "stalenessSeconds";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint16";
                readonly name: "gasCeilingMultiplier";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint96";
                readonly name: "minUpkeepSpend";
                readonly type: "uint96";
            }, {
                readonly internalType: "uint32";
                readonly name: "maxPerformGas";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackGasPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "fallbackLinkPrice";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "transcoder";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "registrar";
                readonly type: "address";
            }];
            readonly internalType: "struct Config";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "keepers";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "payees";
            readonly type: "address[]";
        }];
        readonly name: "setKeepers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "peer";
            readonly type: "address";
        }, {
            readonly internalType: "enum KeeperRegistry.MigrationPermission";
            readonly name: "permission";
            readonly type: "uint8";
        }];
        readonly name: "setPeerRegistryMigrationPermission";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "gasLimit";
            readonly type: "uint32";
        }];
        readonly name: "setUpkeepGasLimit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "keeper";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "proposed";
            readonly type: "address";
        }];
        readonly name: "transferPayeeship";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "typeAndVersion";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "upkeepTranscoderVersion";
        readonly outputs: readonly [{
            readonly internalType: "enum UpkeepFormat";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "withdrawFunds";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "withdrawOwnerFunds";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "withdrawPayment";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): KeeperRegistryAbiInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): KeeperRegistryAbi;
}
//# sourceMappingURL=KeeperRegistryAbi__factory.d.ts.map