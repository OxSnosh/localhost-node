import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { VrfCoordinatorV2Abi, VrfCoordinatorV2AbiInterface } from "../VrfCoordinatorV2Abi";
export declare class VrfCoordinatorV2Abi__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "link";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "blockhashStore";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "linkEthFeed";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "internalBalance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "externalBalance";
            readonly type: "uint256";
        }];
        readonly name: "BalanceInvariantViolated";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "blockNum";
            readonly type: "uint256";
        }];
        readonly name: "BlockhashNotInStore";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "have";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "want";
            readonly type: "uint32";
        }];
        readonly name: "GasLimitTooBig";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectCommitment";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "have";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "want";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientGasForConsumer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldata";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "consumer";
            readonly type: "address";
        }];
        readonly name: "InvalidConsumer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "int256";
            readonly name: "linkWei";
            readonly type: "int256";
        }];
        readonly name: "InvalidLinkWeiPrice";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "have";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "min";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "max";
            readonly type: "uint16";
        }];
        readonly name: "InvalidRequestConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSubscription";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "proposedOwner";
            readonly type: "address";
        }];
        readonly name: "MustBeRequestedOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "MustBeSubOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NoCorrespondingRequest";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "keyHash";
            readonly type: "bytes32";
        }];
        readonly name: "NoSuchProvingKey";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "have";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "want";
            readonly type: "uint32";
        }];
        readonly name: "NumWordsTooBig";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyCallableFromLink";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PaymentTooLarge";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PendingRequestExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "keyHash";
            readonly type: "bytes32";
        }];
        readonly name: "ProvingKeyAlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Reentrant";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TooManyConsumers";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "minimumRequestConfirmations";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "maxGasLimit";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "stalenessSeconds";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "gasAfterPaymentCalculation";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "int256";
            readonly name: "fallbackWeiPerUnitLink";
            readonly type: "int256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier1";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier2";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier3";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier4";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier5";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier2";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier3";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier4";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier5";
                readonly type: "uint24";
            }];
            readonly indexed: false;
            readonly internalType: "struct VRFCoordinatorV2.FeeConfig";
            readonly name: "feeConfig";
            readonly type: "tuple";
        }];
        readonly name: "ConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "FundsRecovered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "keyHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oracle";
            readonly type: "address";
        }];
        readonly name: "ProvingKeyDeregistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "keyHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oracle";
            readonly type: "address";
        }];
        readonly name: "ProvingKeyRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "outputSeed";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint96";
            readonly name: "payment";
            readonly type: "uint96";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly name: "RandomWordsFulfilled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "keyHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "preSeed";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "minimumRequestConfirmations";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "callbackGasLimit";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "numWords";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RandomWordsRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "SubscriptionCanceled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "consumer";
            readonly type: "address";
        }];
        readonly name: "SubscriptionConsumerAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "consumer";
            readonly type: "address";
        }];
        readonly name: "SubscriptionConsumerRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "SubscriptionCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldBalance";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newBalance";
            readonly type: "uint256";
        }];
        readonly name: "SubscriptionFunded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "SubscriptionOwnerTransferRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "SubscriptionOwnerTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "BLOCKHASH_STORE";
        readonly outputs: readonly [{
            readonly internalType: "contract BlockhashStoreInterface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "LINK";
        readonly outputs: readonly [{
            readonly internalType: "contract LinkTokenInterface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "LINK_ETH_FEED";
        readonly outputs: readonly [{
            readonly internalType: "contract AggregatorV3Interface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_CONSUMERS";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_NUM_WORDS";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAX_REQUEST_CONFIRMATIONS";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }];
        readonly name: "acceptSubscriptionOwnerTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "consumer";
            readonly type: "address";
        }];
        readonly name: "addConsumer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "cancelSubscription";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "createSubscription";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[2]";
            readonly name: "publicProvingKey";
            readonly type: "uint256[2]";
        }];
        readonly name: "deregisterProvingKey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256[2]";
                readonly name: "pk";
                readonly type: "uint256[2]";
            }, {
                readonly internalType: "uint256[2]";
                readonly name: "gamma";
                readonly type: "uint256[2]";
            }, {
                readonly internalType: "uint256";
                readonly name: "c";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "s";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "seed";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "uWitness";
                readonly type: "address";
            }, {
                readonly internalType: "uint256[2]";
                readonly name: "cGammaWitness";
                readonly type: "uint256[2]";
            }, {
                readonly internalType: "uint256[2]";
                readonly name: "sHashWitness";
                readonly type: "uint256[2]";
            }, {
                readonly internalType: "uint256";
                readonly name: "zInv";
                readonly type: "uint256";
            }];
            readonly internalType: "struct VRF.Proof";
            readonly name: "proof";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "blockNum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "subId";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "callbackGasLimit";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "numWords";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct VRFCoordinatorV2.RequestCommitment";
            readonly name: "rc";
            readonly type: "tuple";
        }];
        readonly name: "fulfillRandomWords";
        readonly outputs: readonly [{
            readonly internalType: "uint96";
            readonly name: "";
            readonly type: "uint96";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "getCommitment";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "minimumRequestConfirmations";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxGasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "stalenessSeconds";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "gasAfterPaymentCalculation";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentSubId";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getFallbackWeiPerUnitLink";
        readonly outputs: readonly [{
            readonly internalType: "int256";
            readonly name: "";
            readonly type: "int256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getFeeConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "fulfillmentFlatFeeLinkPPMTier1";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "fulfillmentFlatFeeLinkPPMTier2";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "fulfillmentFlatFeeLinkPPMTier3";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "fulfillmentFlatFeeLinkPPMTier4";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "fulfillmentFlatFeeLinkPPMTier5";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint24";
            readonly name: "reqsForTier2";
            readonly type: "uint24";
        }, {
            readonly internalType: "uint24";
            readonly name: "reqsForTier3";
            readonly type: "uint24";
        }, {
            readonly internalType: "uint24";
            readonly name: "reqsForTier4";
            readonly type: "uint24";
        }, {
            readonly internalType: "uint24";
            readonly name: "reqsForTier5";
            readonly type: "uint24";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "reqCount";
            readonly type: "uint64";
        }];
        readonly name: "getFeeTier";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRequestConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }];
        readonly name: "getSubscription";
        readonly outputs: readonly [{
            readonly internalType: "uint96";
            readonly name: "balance";
            readonly type: "uint96";
        }, {
            readonly internalType: "uint64";
            readonly name: "reqCount";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "consumers";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[2]";
            readonly name: "publicKey";
            readonly type: "uint256[2]";
        }];
        readonly name: "hashOfKey";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "onTokenTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "uint96";
            readonly name: "amount";
            readonly type: "uint96";
        }];
        readonly name: "oracleWithdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }];
        readonly name: "ownerCancelSubscription";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }];
        readonly name: "pendingRequestExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "recoverFunds";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oracle";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[2]";
            readonly name: "publicProvingKey";
            readonly type: "uint256[2]";
        }];
        readonly name: "registerProvingKey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "consumer";
            readonly type: "address";
        }];
        readonly name: "removeConsumer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "keyHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "requestConfirmations";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint32";
            readonly name: "callbackGasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "numWords";
            readonly type: "uint32";
        }];
        readonly name: "requestRandomWords";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "subId";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "requestSubscriptionOwnerTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "minimumRequestConfirmations";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxGasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "stalenessSeconds";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "gasAfterPaymentCalculation";
            readonly type: "uint32";
        }, {
            readonly internalType: "int256";
            readonly name: "fallbackWeiPerUnitLink";
            readonly type: "int256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier1";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier2";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier3";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier4";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "fulfillmentFlatFeeLinkPPMTier5";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier2";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier3";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier4";
                readonly type: "uint24";
            }, {
                readonly internalType: "uint24";
                readonly name: "reqsForTier5";
                readonly type: "uint24";
            }];
            readonly internalType: "struct VRFCoordinatorV2.FeeConfig";
            readonly name: "feeConfig";
            readonly type: "tuple";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "typeAndVersion";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): VrfCoordinatorV2AbiInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): VrfCoordinatorV2Abi;
}
//# sourceMappingURL=VrfCoordinatorV2Abi__factory.d.ts.map