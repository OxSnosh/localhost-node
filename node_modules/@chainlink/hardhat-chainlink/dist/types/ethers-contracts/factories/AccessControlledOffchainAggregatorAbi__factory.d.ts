import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { AccessControlledOffchainAggregatorAbi, AccessControlledOffchainAggregatorAbiInterface } from "../AccessControlledOffchainAggregatorAbi";
export declare class AccessControlledOffchainAggregatorAbi__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_maximumGasPrice";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_reasonableGasPrice";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_microLinkPerEth";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_linkGweiPerObservation";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_linkGweiPerTransmission";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_link";
            readonly type: "address";
        }, {
            readonly internalType: "int192";
            readonly name: "_minAnswer";
            readonly type: "int192";
        }, {
            readonly internalType: "int192";
            readonly name: "_maxAnswer";
            readonly type: "int192";
        }, {
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "_billingAccessController";
            readonly type: "address";
        }, {
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "_requesterAccessController";
            readonly type: "address";
        }, {
            readonly internalType: "uint8";
            readonly name: "_decimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "AddedAccess";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "int256";
            readonly name: "current";
            readonly type: "int256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "updatedAt";
            readonly type: "uint256";
        }];
        readonly name: "AnswerUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "old";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "current";
            readonly type: "address";
        }];
        readonly name: "BillingAccessControllerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "maximumGasPrice";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "reasonableGasPrice";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "microLinkPerEth";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "linkGweiPerObservation";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "linkGweiPerTransmission";
            readonly type: "uint32";
        }];
        readonly name: "BillingSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "CheckAccessDisabled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "CheckAccessEnabled";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "previousConfigBlockNumber";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "configCount";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "signers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "transmitters";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "threshold";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "encodedConfigVersion";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encoded";
            readonly type: "bytes";
        }];
        readonly name: "ConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "startedBy";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "startedAt";
            readonly type: "uint256";
        }];
        readonly name: "NewRound";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint32";
            readonly name: "aggregatorRoundId";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "int192";
            readonly name: "answer";
            readonly type: "int192";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "transmitter";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "int192[]";
            readonly name: "observations";
            readonly type: "int192[]";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "observers";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "rawReportContext";
            readonly type: "bytes32";
        }];
        readonly name: "NewTransmission";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "transmitter";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "payee";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "OraclePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "transmitter";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "current";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "proposed";
            readonly type: "address";
        }];
        readonly name: "PayeeshipTransferRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "transmitter";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previous";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "current";
            readonly type: "address";
        }];
        readonly name: "PayeeshipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "RemovedAccess";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "old";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "current";
            readonly type: "address";
        }];
        readonly name: "RequesterAccessControllerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes16";
            readonly name: "configDigest";
            readonly type: "bytes16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "epoch";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "round";
            readonly type: "uint8";
        }];
        readonly name: "RoundRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "contract AggregatorValidatorInterface";
            readonly name: "previousValidator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "previousGasLimit";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "contract AggregatorValidatorInterface";
            readonly name: "currentValidator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "currentGasLimit";
            readonly type: "uint32";
        }];
        readonly name: "ValidatorConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "LINK";
        readonly outputs: readonly [{
            readonly internalType: "contract LinkTokenInterface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_transmitter";
            readonly type: "address";
        }];
        readonly name: "acceptPayeeship";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "addAccess";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "billingAccessController";
        readonly outputs: readonly [{
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "checkEnabled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "description";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "disableAccessCheck";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "enableAccessCheck";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_roundId";
            readonly type: "uint256";
        }];
        readonly name: "getAnswer";
        readonly outputs: readonly [{
            readonly internalType: "int256";
            readonly name: "";
            readonly type: "int256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getBilling";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maximumGasPrice";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "reasonableGasPrice";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "microLinkPerEth";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "linkGweiPerObservation";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "linkGweiPerTransmission";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint80";
            readonly name: "_roundId";
            readonly type: "uint80";
        }];
        readonly name: "getRoundData";
        readonly outputs: readonly [{
            readonly internalType: "uint80";
            readonly name: "roundId";
            readonly type: "uint80";
        }, {
            readonly internalType: "int256";
            readonly name: "answer";
            readonly type: "int256";
        }, {
            readonly internalType: "uint256";
            readonly name: "startedAt";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "updatedAt";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint80";
            readonly name: "answeredInRound";
            readonly type: "uint80";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_roundId";
            readonly type: "uint256";
        }];
        readonly name: "getTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "hasAccess";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestAnswer";
        readonly outputs: readonly [{
            readonly internalType: "int256";
            readonly name: "";
            readonly type: "int256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestConfigDetails";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "configCount";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "blockNumber";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes16";
            readonly name: "configDigest";
            readonly type: "bytes16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestRound";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestRoundData";
        readonly outputs: readonly [{
            readonly internalType: "uint80";
            readonly name: "roundId";
            readonly type: "uint80";
        }, {
            readonly internalType: "int256";
            readonly name: "answer";
            readonly type: "int256";
        }, {
            readonly internalType: "uint256";
            readonly name: "startedAt";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "updatedAt";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint80";
            readonly name: "answeredInRound";
            readonly type: "uint80";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestTransmissionDetails";
        readonly outputs: readonly [{
            readonly internalType: "bytes16";
            readonly name: "configDigest";
            readonly type: "bytes16";
        }, {
            readonly internalType: "uint32";
            readonly name: "epoch";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "round";
            readonly type: "uint8";
        }, {
            readonly internalType: "int192";
            readonly name: "latestAnswer";
            readonly type: "int192";
        }, {
            readonly internalType: "uint64";
            readonly name: "latestTimestamp";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "linkAvailableForPayment";
        readonly outputs: readonly [{
            readonly internalType: "int256";
            readonly name: "availableBalance";
            readonly type: "int256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxAnswer";
        readonly outputs: readonly [{
            readonly internalType: "int192";
            readonly name: "";
            readonly type: "int192";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "minAnswer";
        readonly outputs: readonly [{
            readonly internalType: "int192";
            readonly name: "";
            readonly type: "int192";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_signerOrTransmitter";
            readonly type: "address";
        }];
        readonly name: "oracleObservationCount";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_transmitter";
            readonly type: "address";
        }];
        readonly name: "owedPayment";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "removeAccess";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "requestNewRound";
        readonly outputs: readonly [{
            readonly internalType: "uint80";
            readonly name: "";
            readonly type: "uint80";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "requesterAccessController";
        readonly outputs: readonly [{
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_maximumGasPrice";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_reasonableGasPrice";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_microLinkPerEth";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_linkGweiPerObservation";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_linkGweiPerTransmission";
            readonly type: "uint32";
        }];
        readonly name: "setBilling";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "_billingAccessController";
            readonly type: "address";
        }];
        readonly name: "setBillingAccessController";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_signers";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "_transmitters";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint8";
            readonly name: "_threshold";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint64";
            readonly name: "_encodedConfigVersion";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes";
            readonly name: "_encoded";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_transmitters";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "_payees";
            readonly type: "address[]";
        }];
        readonly name: "setPayees";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract AccessControllerInterface";
            readonly name: "_requesterAccessController";
            readonly type: "address";
        }];
        readonly name: "setRequesterAccessController";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract AggregatorValidatorInterface";
            readonly name: "_newValidator";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_newGasLimit";
            readonly type: "uint32";
        }];
        readonly name: "setValidatorConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_transmitter";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_proposed";
            readonly type: "address";
        }];
        readonly name: "transferPayeeship";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_report";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_rs";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_ss";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_rawVs";
            readonly type: "bytes32";
        }];
        readonly name: "transmit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "transmitters";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "typeAndVersion";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "validatorConfig";
        readonly outputs: readonly [{
            readonly internalType: "contract AggregatorValidatorInterface";
            readonly name: "validator";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "gasLimit";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_recipient";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFunds";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_transmitter";
            readonly type: "address";
        }];
        readonly name: "withdrawPayment";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): AccessControlledOffchainAggregatorAbiInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AccessControlledOffchainAggregatorAbi;
}
//# sourceMappingURL=AccessControlledOffchainAggregatorAbi__factory.d.ts.map