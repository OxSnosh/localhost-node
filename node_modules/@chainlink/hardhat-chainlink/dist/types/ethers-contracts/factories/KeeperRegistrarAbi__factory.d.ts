import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { KeeperRegistrarAbi, KeeperRegistrarAbiInterface } from "../KeeperRegistrarAbi";
export declare class KeeperRegistrarAbi__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "LINKAddress";
            readonly type: "address";
        }, {
            readonly internalType: "enum KeeperRegistrar.AutoApproveType";
            readonly name: "autoApproveConfigType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint16";
            readonly name: "autoApproveMaxAllowed";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "keeperRegistry";
            readonly type: "address";
        }, {
            readonly internalType: "uint96";
            readonly name: "minLINKJuels";
            readonly type: "uint96";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AmountMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FunctionNotPermitted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "HashMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientPayment";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidAdminAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidDataLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "LinkTransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyAdminOrOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyLink";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RegistrationRequestFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RequestNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SenderMismatch";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "senderAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "allowed";
            readonly type: "bool";
        }];
        readonly name: "AutoApproveAllowedSenderSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "enum KeeperRegistrar.AutoApproveType";
            readonly name: "autoApproveConfigType";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "autoApproveMaxAllowed";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "keeperRegistry";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint96";
            readonly name: "minLINKJuels";
            readonly type: "uint96";
        }];
        readonly name: "ConfigChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferRequested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "displayName";
            readonly type: "string";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "upkeepId";
            readonly type: "uint256";
        }];
        readonly name: "RegistrationApproved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "RegistrationRejected";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encryptedEmail";
            readonly type: "bytes";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "upkeepContract";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "gasLimit";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "adminAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "checkData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint96";
            readonly name: "amount";
            readonly type: "uint96";
        }, {
            readonly indexed: true;
            readonly internalType: "uint8";
            readonly name: "source";
            readonly type: "uint8";
        }];
        readonly name: "RegistrationRequested";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "LINK";
        readonly outputs: readonly [{
            readonly internalType: "contract LinkTokenInterface";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "upkeepContract";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "gasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "adminAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "checkData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "cancel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "senderAddress";
            readonly type: "address";
        }];
        readonly name: "getAutoApproveAllowedSender";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "getPendingRequest";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint96";
            readonly name: "";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegistrationConfig";
        readonly outputs: readonly [{
            readonly internalType: "enum KeeperRegistrar.AutoApproveType";
            readonly name: "autoApproveConfigType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint32";
            readonly name: "autoApproveMaxAllowed";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "approvedCount";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "keeperRegistry";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "minLINKJuels";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "onTokenTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "encryptedEmail";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "upkeepContract";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "gasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "adminAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "checkData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint96";
            readonly name: "amount";
            readonly type: "uint96";
        }, {
            readonly internalType: "uint8";
            readonly name: "source";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "register";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "senderAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "allowed";
            readonly type: "bool";
        }];
        readonly name: "setAutoApproveAllowedSender";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum KeeperRegistrar.AutoApproveType";
            readonly name: "autoApproveConfigType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint16";
            readonly name: "autoApproveMaxAllowed";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "keeperRegistry";
            readonly type: "address";
        }, {
            readonly internalType: "uint96";
            readonly name: "minLINKJuels";
            readonly type: "uint96";
        }];
        readonly name: "setRegistrationConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "typeAndVersion";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): KeeperRegistrarAbiInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): KeeperRegistrarAbi;
}
//# sourceMappingURL=KeeperRegistrarAbi__factory.d.ts.map