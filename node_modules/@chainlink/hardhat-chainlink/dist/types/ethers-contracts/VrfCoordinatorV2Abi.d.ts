import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace VRFCoordinatorV2 {
    type FeeConfigStruct = {
        fulfillmentFlatFeeLinkPPMTier1: PromiseOrValue<BigNumberish>;
        fulfillmentFlatFeeLinkPPMTier2: PromiseOrValue<BigNumberish>;
        fulfillmentFlatFeeLinkPPMTier3: PromiseOrValue<BigNumberish>;
        fulfillmentFlatFeeLinkPPMTier4: PromiseOrValue<BigNumberish>;
        fulfillmentFlatFeeLinkPPMTier5: PromiseOrValue<BigNumberish>;
        reqsForTier2: PromiseOrValue<BigNumberish>;
        reqsForTier3: PromiseOrValue<BigNumberish>;
        reqsForTier4: PromiseOrValue<BigNumberish>;
        reqsForTier5: PromiseOrValue<BigNumberish>;
    };
    type FeeConfigStructOutput = [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
    ] & {
        fulfillmentFlatFeeLinkPPMTier1: number;
        fulfillmentFlatFeeLinkPPMTier2: number;
        fulfillmentFlatFeeLinkPPMTier3: number;
        fulfillmentFlatFeeLinkPPMTier4: number;
        fulfillmentFlatFeeLinkPPMTier5: number;
        reqsForTier2: number;
        reqsForTier3: number;
        reqsForTier4: number;
        reqsForTier5: number;
    };
    type RequestCommitmentStruct = {
        blockNum: PromiseOrValue<BigNumberish>;
        subId: PromiseOrValue<BigNumberish>;
        callbackGasLimit: PromiseOrValue<BigNumberish>;
        numWords: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
    };
    type RequestCommitmentStructOutput = [
        BigNumber,
        BigNumber,
        number,
        number,
        string
    ] & {
        blockNum: BigNumber;
        subId: BigNumber;
        callbackGasLimit: number;
        numWords: number;
        sender: string;
    };
}
export declare namespace VRF {
    type ProofStruct = {
        pk: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
        gamma: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
        c: PromiseOrValue<BigNumberish>;
        s: PromiseOrValue<BigNumberish>;
        seed: PromiseOrValue<BigNumberish>;
        uWitness: PromiseOrValue<string>;
        cGammaWitness: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
        sHashWitness: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
        zInv: PromiseOrValue<BigNumberish>;
    };
    type ProofStructOutput = [
        [
            BigNumber,
            BigNumber
        ],
        [
            BigNumber,
            BigNumber
        ],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        [
            BigNumber,
            BigNumber
        ],
        [
            BigNumber,
            BigNumber
        ],
        BigNumber
    ] & {
        pk: [BigNumber, BigNumber];
        gamma: [BigNumber, BigNumber];
        c: BigNumber;
        s: BigNumber;
        seed: BigNumber;
        uWitness: string;
        cGammaWitness: [BigNumber, BigNumber];
        sHashWitness: [BigNumber, BigNumber];
        zInv: BigNumber;
    };
}
export interface VrfCoordinatorV2AbiInterface extends utils.Interface {
    functions: {
        "BLOCKHASH_STORE()": FunctionFragment;
        "LINK()": FunctionFragment;
        "LINK_ETH_FEED()": FunctionFragment;
        "MAX_CONSUMERS()": FunctionFragment;
        "MAX_NUM_WORDS()": FunctionFragment;
        "MAX_REQUEST_CONFIRMATIONS()": FunctionFragment;
        "acceptOwnership()": FunctionFragment;
        "acceptSubscriptionOwnerTransfer(uint64)": FunctionFragment;
        "addConsumer(uint64,address)": FunctionFragment;
        "cancelSubscription(uint64,address)": FunctionFragment;
        "createSubscription()": FunctionFragment;
        "deregisterProvingKey(uint256[2])": FunctionFragment;
        "fulfillRandomWords((uint256[2],uint256[2],uint256,uint256,uint256,address,uint256[2],uint256[2],uint256),(uint64,uint64,uint32,uint32,address))": FunctionFragment;
        "getCommitment(uint256)": FunctionFragment;
        "getConfig()": FunctionFragment;
        "getCurrentSubId()": FunctionFragment;
        "getFallbackWeiPerUnitLink()": FunctionFragment;
        "getFeeConfig()": FunctionFragment;
        "getFeeTier(uint64)": FunctionFragment;
        "getRequestConfig()": FunctionFragment;
        "getSubscription(uint64)": FunctionFragment;
        "getTotalBalance()": FunctionFragment;
        "hashOfKey(uint256[2])": FunctionFragment;
        "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
        "oracleWithdraw(address,uint96)": FunctionFragment;
        "owner()": FunctionFragment;
        "ownerCancelSubscription(uint64)": FunctionFragment;
        "pendingRequestExists(uint64)": FunctionFragment;
        "recoverFunds(address)": FunctionFragment;
        "registerProvingKey(address,uint256[2])": FunctionFragment;
        "removeConsumer(uint64,address)": FunctionFragment;
        "requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": FunctionFragment;
        "requestSubscriptionOwnerTransfer(uint64,address)": FunctionFragment;
        "setConfig(uint16,uint32,uint32,uint32,int256,(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "typeAndVersion()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "BLOCKHASH_STORE" | "LINK" | "LINK_ETH_FEED" | "MAX_CONSUMERS" | "MAX_NUM_WORDS" | "MAX_REQUEST_CONFIRMATIONS" | "acceptOwnership" | "acceptSubscriptionOwnerTransfer" | "addConsumer" | "cancelSubscription" | "createSubscription" | "deregisterProvingKey" | "fulfillRandomWords" | "getCommitment" | "getConfig" | "getCurrentSubId" | "getFallbackWeiPerUnitLink" | "getFeeConfig" | "getFeeTier" | "getRequestConfig" | "getSubscription" | "getTotalBalance" | "hashOfKey" | "onTokenTransfer" | "oracleWithdraw" | "owner" | "ownerCancelSubscription" | "pendingRequestExists" | "recoverFunds" | "registerProvingKey" | "removeConsumer" | "requestRandomWords" | "requestSubscriptionOwnerTransfer" | "setConfig" | "transferOwnership" | "typeAndVersion"): FunctionFragment;
    encodeFunctionData(functionFragment: "BLOCKHASH_STORE", values?: undefined): string;
    encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
    encodeFunctionData(functionFragment: "LINK_ETH_FEED", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_CONSUMERS", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_NUM_WORDS", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_REQUEST_CONFIRMATIONS", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptSubscriptionOwnerTransfer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "addConsumer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "cancelSubscription", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "createSubscription", values?: undefined): string;
    encodeFunctionData(functionFragment: "deregisterProvingKey", values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]]): string;
    encodeFunctionData(functionFragment: "fulfillRandomWords", values: [VRF.ProofStruct, VRFCoordinatorV2.RequestCommitmentStruct]): string;
    encodeFunctionData(functionFragment: "getCommitment", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentSubId", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFallbackWeiPerUnitLink", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFeeConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFeeTier", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRequestConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSubscription", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTotalBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "hashOfKey", values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]]): string;
    encodeFunctionData(functionFragment: "onTokenTransfer", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "oracleWithdraw", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "ownerCancelSubscription", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "pendingRequestExists", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "recoverFunds", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "registerProvingKey", values: [
        PromiseOrValue<string>,
        [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ]): string;
    encodeFunctionData(functionFragment: "removeConsumer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "requestRandomWords", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "requestSubscriptionOwnerTransfer", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        VRFCoordinatorV2.FeeConfigStruct
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "typeAndVersion", values?: undefined): string;
    decodeFunctionResult(functionFragment: "BLOCKHASH_STORE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "LINK_ETH_FEED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_CONSUMERS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_NUM_WORDS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_REQUEST_CONFIRMATIONS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptSubscriptionOwnerTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addConsumer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deregisterProvingKey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRandomWords", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCommitment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentSubId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFallbackWeiPerUnitLink", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeTier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRequestConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashOfKey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onTokenTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracleWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerCancelSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingRequestExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recoverFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerProvingKey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeConsumer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestRandomWords", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestSubscriptionOwnerTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion", data: BytesLike): Result;
    events: {
        "ConfigSet(uint16,uint32,uint32,uint32,int256,tuple)": EventFragment;
        "FundsRecovered(address,uint256)": EventFragment;
        "OwnershipTransferRequested(address,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ProvingKeyDeregistered(bytes32,address)": EventFragment;
        "ProvingKeyRegistered(bytes32,address)": EventFragment;
        "RandomWordsFulfilled(uint256,uint256,uint96,bool)": EventFragment;
        "RandomWordsRequested(bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)": EventFragment;
        "SubscriptionCanceled(uint64,address,uint256)": EventFragment;
        "SubscriptionConsumerAdded(uint64,address)": EventFragment;
        "SubscriptionConsumerRemoved(uint64,address)": EventFragment;
        "SubscriptionCreated(uint64,address)": EventFragment;
        "SubscriptionFunded(uint64,uint256,uint256)": EventFragment;
        "SubscriptionOwnerTransferRequested(uint64,address,address)": EventFragment;
        "SubscriptionOwnerTransferred(uint64,address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FundsRecovered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProvingKeyDeregistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProvingKeyRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RandomWordsFulfilled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RandomWordsRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionCanceled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionConsumerAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionConsumerRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionFunded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionOwnerTransferRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionOwnerTransferred"): EventFragment;
}
export interface ConfigSetEventObject {
    minimumRequestConfirmations: number;
    maxGasLimit: number;
    stalenessSeconds: number;
    gasAfterPaymentCalculation: number;
    fallbackWeiPerUnitLink: BigNumber;
    feeConfig: VRFCoordinatorV2.FeeConfigStructOutput;
}
export type ConfigSetEvent = TypedEvent<[
    number,
    number,
    number,
    number,
    BigNumber,
    VRFCoordinatorV2.FeeConfigStructOutput
], ConfigSetEventObject>;
export type ConfigSetEventFilter = TypedEventFilter<ConfigSetEvent>;
export interface FundsRecoveredEventObject {
    to: string;
    amount: BigNumber;
}
export type FundsRecoveredEvent = TypedEvent<[
    string,
    BigNumber
], FundsRecoveredEventObject>;
export type FundsRecoveredEventFilter = TypedEventFilter<FundsRecoveredEvent>;
export interface OwnershipTransferRequestedEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<[
    string,
    string
], OwnershipTransferRequestedEventObject>;
export type OwnershipTransferRequestedEventFilter = TypedEventFilter<OwnershipTransferRequestedEvent>;
export interface OwnershipTransferredEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface ProvingKeyDeregisteredEventObject {
    keyHash: string;
    oracle: string;
}
export type ProvingKeyDeregisteredEvent = TypedEvent<[
    string,
    string
], ProvingKeyDeregisteredEventObject>;
export type ProvingKeyDeregisteredEventFilter = TypedEventFilter<ProvingKeyDeregisteredEvent>;
export interface ProvingKeyRegisteredEventObject {
    keyHash: string;
    oracle: string;
}
export type ProvingKeyRegisteredEvent = TypedEvent<[
    string,
    string
], ProvingKeyRegisteredEventObject>;
export type ProvingKeyRegisteredEventFilter = TypedEventFilter<ProvingKeyRegisteredEvent>;
export interface RandomWordsFulfilledEventObject {
    requestId: BigNumber;
    outputSeed: BigNumber;
    payment: BigNumber;
    success: boolean;
}
export type RandomWordsFulfilledEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
], RandomWordsFulfilledEventObject>;
export type RandomWordsFulfilledEventFilter = TypedEventFilter<RandomWordsFulfilledEvent>;
export interface RandomWordsRequestedEventObject {
    keyHash: string;
    requestId: BigNumber;
    preSeed: BigNumber;
    subId: BigNumber;
    minimumRequestConfirmations: number;
    callbackGasLimit: number;
    numWords: number;
    sender: string;
}
export type RandomWordsRequestedEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    string
], RandomWordsRequestedEventObject>;
export type RandomWordsRequestedEventFilter = TypedEventFilter<RandomWordsRequestedEvent>;
export interface SubscriptionCanceledEventObject {
    subId: BigNumber;
    to: string;
    amount: BigNumber;
}
export type SubscriptionCanceledEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], SubscriptionCanceledEventObject>;
export type SubscriptionCanceledEventFilter = TypedEventFilter<SubscriptionCanceledEvent>;
export interface SubscriptionConsumerAddedEventObject {
    subId: BigNumber;
    consumer: string;
}
export type SubscriptionConsumerAddedEvent = TypedEvent<[
    BigNumber,
    string
], SubscriptionConsumerAddedEventObject>;
export type SubscriptionConsumerAddedEventFilter = TypedEventFilter<SubscriptionConsumerAddedEvent>;
export interface SubscriptionConsumerRemovedEventObject {
    subId: BigNumber;
    consumer: string;
}
export type SubscriptionConsumerRemovedEvent = TypedEvent<[
    BigNumber,
    string
], SubscriptionConsumerRemovedEventObject>;
export type SubscriptionConsumerRemovedEventFilter = TypedEventFilter<SubscriptionConsumerRemovedEvent>;
export interface SubscriptionCreatedEventObject {
    subId: BigNumber;
    owner: string;
}
export type SubscriptionCreatedEvent = TypedEvent<[
    BigNumber,
    string
], SubscriptionCreatedEventObject>;
export type SubscriptionCreatedEventFilter = TypedEventFilter<SubscriptionCreatedEvent>;
export interface SubscriptionFundedEventObject {
    subId: BigNumber;
    oldBalance: BigNumber;
    newBalance: BigNumber;
}
export type SubscriptionFundedEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber
], SubscriptionFundedEventObject>;
export type SubscriptionFundedEventFilter = TypedEventFilter<SubscriptionFundedEvent>;
export interface SubscriptionOwnerTransferRequestedEventObject {
    subId: BigNumber;
    from: string;
    to: string;
}
export type SubscriptionOwnerTransferRequestedEvent = TypedEvent<[
    BigNumber,
    string,
    string
], SubscriptionOwnerTransferRequestedEventObject>;
export type SubscriptionOwnerTransferRequestedEventFilter = TypedEventFilter<SubscriptionOwnerTransferRequestedEvent>;
export interface SubscriptionOwnerTransferredEventObject {
    subId: BigNumber;
    from: string;
    to: string;
}
export type SubscriptionOwnerTransferredEvent = TypedEvent<[
    BigNumber,
    string,
    string
], SubscriptionOwnerTransferredEventObject>;
export type SubscriptionOwnerTransferredEventFilter = TypedEventFilter<SubscriptionOwnerTransferredEvent>;
export interface VrfCoordinatorV2Abi extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VrfCoordinatorV2AbiInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        BLOCKHASH_STORE(overrides?: CallOverrides): Promise<[string]>;
        LINK(overrides?: CallOverrides): Promise<[string]>;
        LINK_ETH_FEED(overrides?: CallOverrides): Promise<[string]>;
        MAX_CONSUMERS(overrides?: CallOverrides): Promise<[number]>;
        MAX_NUM_WORDS(overrides?: CallOverrides): Promise<[number]>;
        MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<[number]>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        acceptSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        cancelSubscription(subId: PromiseOrValue<BigNumberish>, to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        createSubscription(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deregisterProvingKey(publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fulfillRandomWords(proof: VRF.ProofStruct, rc: VRFCoordinatorV2.RequestCommitmentStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getCommitment(requestId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getConfig(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            number
        ] & {
            minimumRequestConfirmations: number;
            maxGasLimit: number;
            stalenessSeconds: number;
            gasAfterPaymentCalculation: number;
        }>;
        getCurrentSubId(overrides?: CallOverrides): Promise<[BigNumber]>;
        getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<[BigNumber]>;
        getFeeConfig(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
        ] & {
            fulfillmentFlatFeeLinkPPMTier1: number;
            fulfillmentFlatFeeLinkPPMTier2: number;
            fulfillmentFlatFeeLinkPPMTier3: number;
            fulfillmentFlatFeeLinkPPMTier4: number;
            fulfillmentFlatFeeLinkPPMTier5: number;
            reqsForTier2: number;
            reqsForTier3: number;
            reqsForTier4: number;
            reqsForTier5: number;
        }>;
        getFeeTier(reqCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        getRequestConfig(overrides?: CallOverrides): Promise<[number, number, string[]]>;
        getSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            string,
            string[]
        ] & {
            balance: BigNumber;
            reqCount: BigNumber;
            owner: string;
            consumers: string[];
        }>;
        getTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
        hashOfKey(publicKey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>], overrides?: CallOverrides): Promise<[string]>;
        onTokenTransfer(arg0: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        oracleWithdraw(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        ownerCancelSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pendingRequestExists(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        recoverFunds(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerProvingKey(oracle: PromiseOrValue<string>, publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestRandomWords(keyHash: PromiseOrValue<BytesLike>, subId: PromiseOrValue<BigNumberish>, requestConfirmations: PromiseOrValue<BigNumberish>, callbackGasLimit: PromiseOrValue<BigNumberish>, numWords: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(minimumRequestConfirmations: PromiseOrValue<BigNumberish>, maxGasLimit: PromiseOrValue<BigNumberish>, stalenessSeconds: PromiseOrValue<BigNumberish>, gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>, fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>, feeConfig: VRFCoordinatorV2.FeeConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        typeAndVersion(overrides?: CallOverrides): Promise<[string]>;
    };
    BLOCKHASH_STORE(overrides?: CallOverrides): Promise<string>;
    LINK(overrides?: CallOverrides): Promise<string>;
    LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;
    MAX_CONSUMERS(overrides?: CallOverrides): Promise<number>;
    MAX_NUM_WORDS(overrides?: CallOverrides): Promise<number>;
    MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<number>;
    acceptOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    acceptSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    cancelSubscription(subId: PromiseOrValue<BigNumberish>, to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    createSubscription(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deregisterProvingKey(publicProvingKey: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fulfillRandomWords(proof: VRF.ProofStruct, rc: VRFCoordinatorV2.RequestCommitmentStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getCommitment(requestId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getConfig(overrides?: CallOverrides): Promise<[
        number,
        number,
        number,
        number
    ] & {
        minimumRequestConfirmations: number;
        maxGasLimit: number;
        stalenessSeconds: number;
        gasAfterPaymentCalculation: number;
    }>;
    getCurrentSubId(overrides?: CallOverrides): Promise<BigNumber>;
    getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<BigNumber>;
    getFeeConfig(overrides?: CallOverrides): Promise<[
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
    ] & {
        fulfillmentFlatFeeLinkPPMTier1: number;
        fulfillmentFlatFeeLinkPPMTier2: number;
        fulfillmentFlatFeeLinkPPMTier3: number;
        fulfillmentFlatFeeLinkPPMTier4: number;
        fulfillmentFlatFeeLinkPPMTier5: number;
        reqsForTier2: number;
        reqsForTier3: number;
        reqsForTier4: number;
        reqsForTier5: number;
    }>;
    getFeeTier(reqCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    getRequestConfig(overrides?: CallOverrides): Promise<[number, number, string[]]>;
    getSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        string,
        string[]
    ] & {
        balance: BigNumber;
        reqCount: BigNumber;
        owner: string;
        consumers: string[];
    }>;
    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;
    hashOfKey(publicKey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>], overrides?: CallOverrides): Promise<string>;
    onTokenTransfer(arg0: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    oracleWithdraw(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    ownerCancelSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pendingRequestExists(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    recoverFunds(to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerProvingKey(oracle: PromiseOrValue<string>, publicProvingKey: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestRandomWords(keyHash: PromiseOrValue<BytesLike>, subId: PromiseOrValue<BigNumberish>, requestConfirmations: PromiseOrValue<BigNumberish>, callbackGasLimit: PromiseOrValue<BigNumberish>, numWords: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(minimumRequestConfirmations: PromiseOrValue<BigNumberish>, maxGasLimit: PromiseOrValue<BigNumberish>, stalenessSeconds: PromiseOrValue<BigNumberish>, gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>, fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>, feeConfig: VRFCoordinatorV2.FeeConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    typeAndVersion(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        BLOCKHASH_STORE(overrides?: CallOverrides): Promise<string>;
        LINK(overrides?: CallOverrides): Promise<string>;
        LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;
        MAX_CONSUMERS(overrides?: CallOverrides): Promise<number>;
        MAX_NUM_WORDS(overrides?: CallOverrides): Promise<number>;
        MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<number>;
        acceptOwnership(overrides?: CallOverrides): Promise<void>;
        acceptSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        addConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        cancelSubscription(subId: PromiseOrValue<BigNumberish>, to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        createSubscription(overrides?: CallOverrides): Promise<BigNumber>;
        deregisterProvingKey(publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: CallOverrides): Promise<void>;
        fulfillRandomWords(proof: VRF.ProofStruct, rc: VRFCoordinatorV2.RequestCommitmentStruct, overrides?: CallOverrides): Promise<BigNumber>;
        getCommitment(requestId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getConfig(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            number
        ] & {
            minimumRequestConfirmations: number;
            maxGasLimit: number;
            stalenessSeconds: number;
            gasAfterPaymentCalculation: number;
        }>;
        getCurrentSubId(overrides?: CallOverrides): Promise<BigNumber>;
        getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<BigNumber>;
        getFeeConfig(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
        ] & {
            fulfillmentFlatFeeLinkPPMTier1: number;
            fulfillmentFlatFeeLinkPPMTier2: number;
            fulfillmentFlatFeeLinkPPMTier3: number;
            fulfillmentFlatFeeLinkPPMTier4: number;
            fulfillmentFlatFeeLinkPPMTier5: number;
            reqsForTier2: number;
            reqsForTier3: number;
            reqsForTier4: number;
            reqsForTier5: number;
        }>;
        getFeeTier(reqCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        getRequestConfig(overrides?: CallOverrides): Promise<[number, number, string[]]>;
        getSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            string,
            string[]
        ] & {
            balance: BigNumber;
            reqCount: BigNumber;
            owner: string;
            consumers: string[];
        }>;
        getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;
        hashOfKey(publicKey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>], overrides?: CallOverrides): Promise<string>;
        onTokenTransfer(arg0: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        oracleWithdraw(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        ownerCancelSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        pendingRequestExists(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        recoverFunds(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        registerProvingKey(oracle: PromiseOrValue<string>, publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: CallOverrides): Promise<void>;
        removeConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        requestRandomWords(keyHash: PromiseOrValue<BytesLike>, subId: PromiseOrValue<BigNumberish>, requestConfirmations: PromiseOrValue<BigNumberish>, callbackGasLimit: PromiseOrValue<BigNumberish>, numWords: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        requestSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setConfig(minimumRequestConfirmations: PromiseOrValue<BigNumberish>, maxGasLimit: PromiseOrValue<BigNumberish>, stalenessSeconds: PromiseOrValue<BigNumberish>, gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>, fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>, feeConfig: VRFCoordinatorV2.FeeConfigStruct, overrides?: CallOverrides): Promise<void>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        typeAndVersion(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ConfigSet(uint16,uint32,uint32,uint32,int256,tuple)"(minimumRequestConfirmations?: null, maxGasLimit?: null, stalenessSeconds?: null, gasAfterPaymentCalculation?: null, fallbackWeiPerUnitLink?: null, feeConfig?: null): ConfigSetEventFilter;
        ConfigSet(minimumRequestConfirmations?: null, maxGasLimit?: null, stalenessSeconds?: null, gasAfterPaymentCalculation?: null, fallbackWeiPerUnitLink?: null, feeConfig?: null): ConfigSetEventFilter;
        "FundsRecovered(address,uint256)"(to?: null, amount?: null): FundsRecoveredEventFilter;
        FundsRecovered(to?: null, amount?: null): FundsRecoveredEventFilter;
        "OwnershipTransferRequested(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        OwnershipTransferRequested(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        "OwnershipTransferred(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "ProvingKeyDeregistered(bytes32,address)"(keyHash?: null, oracle?: PromiseOrValue<string> | null): ProvingKeyDeregisteredEventFilter;
        ProvingKeyDeregistered(keyHash?: null, oracle?: PromiseOrValue<string> | null): ProvingKeyDeregisteredEventFilter;
        "ProvingKeyRegistered(bytes32,address)"(keyHash?: null, oracle?: PromiseOrValue<string> | null): ProvingKeyRegisteredEventFilter;
        ProvingKeyRegistered(keyHash?: null, oracle?: PromiseOrValue<string> | null): ProvingKeyRegisteredEventFilter;
        "RandomWordsFulfilled(uint256,uint256,uint96,bool)"(requestId?: PromiseOrValue<BigNumberish> | null, outputSeed?: null, payment?: null, success?: null): RandomWordsFulfilledEventFilter;
        RandomWordsFulfilled(requestId?: PromiseOrValue<BigNumberish> | null, outputSeed?: null, payment?: null, success?: null): RandomWordsFulfilledEventFilter;
        "RandomWordsRequested(bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)"(keyHash?: PromiseOrValue<BytesLike> | null, requestId?: null, preSeed?: null, subId?: PromiseOrValue<BigNumberish> | null, minimumRequestConfirmations?: null, callbackGasLimit?: null, numWords?: null, sender?: PromiseOrValue<string> | null): RandomWordsRequestedEventFilter;
        RandomWordsRequested(keyHash?: PromiseOrValue<BytesLike> | null, requestId?: null, preSeed?: null, subId?: PromiseOrValue<BigNumberish> | null, minimumRequestConfirmations?: null, callbackGasLimit?: null, numWords?: null, sender?: PromiseOrValue<string> | null): RandomWordsRequestedEventFilter;
        "SubscriptionCanceled(uint64,address,uint256)"(subId?: PromiseOrValue<BigNumberish> | null, to?: null, amount?: null): SubscriptionCanceledEventFilter;
        SubscriptionCanceled(subId?: PromiseOrValue<BigNumberish> | null, to?: null, amount?: null): SubscriptionCanceledEventFilter;
        "SubscriptionConsumerAdded(uint64,address)"(subId?: PromiseOrValue<BigNumberish> | null, consumer?: null): SubscriptionConsumerAddedEventFilter;
        SubscriptionConsumerAdded(subId?: PromiseOrValue<BigNumberish> | null, consumer?: null): SubscriptionConsumerAddedEventFilter;
        "SubscriptionConsumerRemoved(uint64,address)"(subId?: PromiseOrValue<BigNumberish> | null, consumer?: null): SubscriptionConsumerRemovedEventFilter;
        SubscriptionConsumerRemoved(subId?: PromiseOrValue<BigNumberish> | null, consumer?: null): SubscriptionConsumerRemovedEventFilter;
        "SubscriptionCreated(uint64,address)"(subId?: PromiseOrValue<BigNumberish> | null, owner?: null): SubscriptionCreatedEventFilter;
        SubscriptionCreated(subId?: PromiseOrValue<BigNumberish> | null, owner?: null): SubscriptionCreatedEventFilter;
        "SubscriptionFunded(uint64,uint256,uint256)"(subId?: PromiseOrValue<BigNumberish> | null, oldBalance?: null, newBalance?: null): SubscriptionFundedEventFilter;
        SubscriptionFunded(subId?: PromiseOrValue<BigNumberish> | null, oldBalance?: null, newBalance?: null): SubscriptionFundedEventFilter;
        "SubscriptionOwnerTransferRequested(uint64,address,address)"(subId?: PromiseOrValue<BigNumberish> | null, from?: null, to?: null): SubscriptionOwnerTransferRequestedEventFilter;
        SubscriptionOwnerTransferRequested(subId?: PromiseOrValue<BigNumberish> | null, from?: null, to?: null): SubscriptionOwnerTransferRequestedEventFilter;
        "SubscriptionOwnerTransferred(uint64,address,address)"(subId?: PromiseOrValue<BigNumberish> | null, from?: null, to?: null): SubscriptionOwnerTransferredEventFilter;
        SubscriptionOwnerTransferred(subId?: PromiseOrValue<BigNumberish> | null, from?: null, to?: null): SubscriptionOwnerTransferredEventFilter;
    };
    estimateGas: {
        BLOCKHASH_STORE(overrides?: CallOverrides): Promise<BigNumber>;
        LINK(overrides?: CallOverrides): Promise<BigNumber>;
        LINK_ETH_FEED(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_CONSUMERS(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_NUM_WORDS(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<BigNumber>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        acceptSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        cancelSubscription(subId: PromiseOrValue<BigNumberish>, to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        createSubscription(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deregisterProvingKey(publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fulfillRandomWords(proof: VRF.ProofStruct, rc: VRFCoordinatorV2.RequestCommitmentStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getCommitment(requestId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentSubId(overrides?: CallOverrides): Promise<BigNumber>;
        getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<BigNumber>;
        getFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getFeeTier(reqCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRequestConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;
        hashOfKey(publicKey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>], overrides?: CallOverrides): Promise<BigNumber>;
        onTokenTransfer(arg0: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        oracleWithdraw(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        ownerCancelSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pendingRequestExists(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        recoverFunds(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerProvingKey(oracle: PromiseOrValue<string>, publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestRandomWords(keyHash: PromiseOrValue<BytesLike>, subId: PromiseOrValue<BigNumberish>, requestConfirmations: PromiseOrValue<BigNumberish>, callbackGasLimit: PromiseOrValue<BigNumberish>, numWords: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(minimumRequestConfirmations: PromiseOrValue<BigNumberish>, maxGasLimit: PromiseOrValue<BigNumberish>, stalenessSeconds: PromiseOrValue<BigNumberish>, gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>, fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>, feeConfig: VRFCoordinatorV2.FeeConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        BLOCKHASH_STORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        LINK(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        LINK_ETH_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_CONSUMERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_NUM_WORDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_REQUEST_CONFIRMATIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        acceptSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        cancelSubscription(subId: PromiseOrValue<BigNumberish>, to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        createSubscription(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deregisterProvingKey(publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fulfillRandomWords(proof: VRF.ProofStruct, rc: VRFCoordinatorV2.RequestCommitmentStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getCommitment(requestId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentSubId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFallbackWeiPerUnitLink(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeTier(reqCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRequestConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashOfKey(publicKey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        onTokenTransfer(arg0: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        oracleWithdraw(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ownerCancelSubscription(subId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pendingRequestExists(subId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recoverFunds(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerProvingKey(oracle: PromiseOrValue<string>, publicProvingKey: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeConsumer(subId: PromiseOrValue<BigNumberish>, consumer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestRandomWords(keyHash: PromiseOrValue<BytesLike>, subId: PromiseOrValue<BigNumberish>, requestConfirmations: PromiseOrValue<BigNumberish>, callbackGasLimit: PromiseOrValue<BigNumberish>, numWords: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestSubscriptionOwnerTransfer(subId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(minimumRequestConfirmations: PromiseOrValue<BigNumberish>, maxGasLimit: PromiseOrValue<BigNumberish>, stalenessSeconds: PromiseOrValue<BigNumberish>, gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>, fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>, feeConfig: VRFCoordinatorV2.FeeConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=VrfCoordinatorV2Abi.d.ts.map