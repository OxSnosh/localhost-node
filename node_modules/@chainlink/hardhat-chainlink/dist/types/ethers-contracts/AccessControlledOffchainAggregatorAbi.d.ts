import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface AccessControlledOffchainAggregatorAbiInterface extends utils.Interface {
    functions: {
        "LINK()": FunctionFragment;
        "acceptOwnership()": FunctionFragment;
        "acceptPayeeship(address)": FunctionFragment;
        "addAccess(address)": FunctionFragment;
        "billingAccessController()": FunctionFragment;
        "checkEnabled()": FunctionFragment;
        "decimals()": FunctionFragment;
        "description()": FunctionFragment;
        "disableAccessCheck()": FunctionFragment;
        "enableAccessCheck()": FunctionFragment;
        "getAnswer(uint256)": FunctionFragment;
        "getBilling()": FunctionFragment;
        "getRoundData(uint80)": FunctionFragment;
        "getTimestamp(uint256)": FunctionFragment;
        "hasAccess(address,bytes)": FunctionFragment;
        "latestAnswer()": FunctionFragment;
        "latestConfigDetails()": FunctionFragment;
        "latestRound()": FunctionFragment;
        "latestRoundData()": FunctionFragment;
        "latestTimestamp()": FunctionFragment;
        "latestTransmissionDetails()": FunctionFragment;
        "linkAvailableForPayment()": FunctionFragment;
        "maxAnswer()": FunctionFragment;
        "minAnswer()": FunctionFragment;
        "oracleObservationCount(address)": FunctionFragment;
        "owedPayment(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "removeAccess(address)": FunctionFragment;
        "requestNewRound()": FunctionFragment;
        "requesterAccessController()": FunctionFragment;
        "setBilling(uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
        "setBillingAccessController(address)": FunctionFragment;
        "setConfig(address[],address[],uint8,uint64,bytes)": FunctionFragment;
        "setPayees(address[],address[])": FunctionFragment;
        "setRequesterAccessController(address)": FunctionFragment;
        "setValidatorConfig(address,uint32)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "transferPayeeship(address,address)": FunctionFragment;
        "transmit(bytes,bytes32[],bytes32[],bytes32)": FunctionFragment;
        "transmitters()": FunctionFragment;
        "typeAndVersion()": FunctionFragment;
        "validatorConfig()": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFunds(address,uint256)": FunctionFragment;
        "withdrawPayment(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "LINK" | "acceptOwnership" | "acceptPayeeship" | "addAccess" | "billingAccessController" | "checkEnabled" | "decimals" | "description" | "disableAccessCheck" | "enableAccessCheck" | "getAnswer" | "getBilling" | "getRoundData" | "getTimestamp" | "hasAccess" | "latestAnswer" | "latestConfigDetails" | "latestRound" | "latestRoundData" | "latestTimestamp" | "latestTransmissionDetails" | "linkAvailableForPayment" | "maxAnswer" | "minAnswer" | "oracleObservationCount" | "owedPayment" | "owner" | "removeAccess" | "requestNewRound" | "requesterAccessController" | "setBilling" | "setBillingAccessController" | "setConfig" | "setPayees" | "setRequesterAccessController" | "setValidatorConfig" | "transferOwnership" | "transferPayeeship" | "transmit" | "transmitters" | "typeAndVersion" | "validatorConfig" | "version" | "withdrawFunds" | "withdrawPayment"): FunctionFragment;
    encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptPayeeship", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "addAccess", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "billingAccessController", values?: undefined): string;
    encodeFunctionData(functionFragment: "checkEnabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "description", values?: undefined): string;
    encodeFunctionData(functionFragment: "disableAccessCheck", values?: undefined): string;
    encodeFunctionData(functionFragment: "enableAccessCheck", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAnswer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getBilling", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoundData", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTimestamp", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hasAccess", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestConfigDetails", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRoundData", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestTransmissionDetails", values?: undefined): string;
    encodeFunctionData(functionFragment: "linkAvailableForPayment", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxAnswer", values?: undefined): string;
    encodeFunctionData(functionFragment: "minAnswer", values?: undefined): string;
    encodeFunctionData(functionFragment: "oracleObservationCount", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owedPayment", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeAccess", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "requestNewRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "requesterAccessController", values?: undefined): string;
    encodeFunctionData(functionFragment: "setBilling", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setBillingAccessController", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>[],
        PromiseOrValue<string>[],
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setPayees", values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "setRequesterAccessController", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setValidatorConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferPayeeship", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transmit", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "transmitters", values?: undefined): string;
    encodeFunctionData(functionFragment: "typeAndVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "validatorConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFunds", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawPayment", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptPayeeship", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addAccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "billingAccessController", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "disableAccessCheck", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enableAccessCheck", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBilling", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestConfigDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTransmissionDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "linkAvailableForPayment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracleObservationCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owedPayment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeAccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestNewRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requesterAccessController", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBilling", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBillingAccessController", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPayees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRequesterAccessController", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setValidatorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferPayeeship", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transmitters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawPayment", data: BytesLike): Result;
    events: {
        "AddedAccess(address)": EventFragment;
        "AnswerUpdated(int256,uint256,uint256)": EventFragment;
        "BillingAccessControllerSet(address,address)": EventFragment;
        "BillingSet(uint32,uint32,uint32,uint32,uint32)": EventFragment;
        "CheckAccessDisabled()": EventFragment;
        "CheckAccessEnabled()": EventFragment;
        "ConfigSet(uint32,uint64,address[],address[],uint8,uint64,bytes)": EventFragment;
        "NewRound(uint256,address,uint256)": EventFragment;
        "NewTransmission(uint32,int192,address,int192[],bytes,bytes32)": EventFragment;
        "OraclePaid(address,address,uint256)": EventFragment;
        "OwnershipTransferRequested(address,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PayeeshipTransferRequested(address,address,address)": EventFragment;
        "PayeeshipTransferred(address,address,address)": EventFragment;
        "RemovedAccess(address)": EventFragment;
        "RequesterAccessControllerSet(address,address)": EventFragment;
        "RoundRequested(address,bytes16,uint32,uint8)": EventFragment;
        "ValidatorConfigSet(address,uint32,address,uint32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddedAccess"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AnswerUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BillingAccessControllerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BillingSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CheckAccessDisabled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CheckAccessEnabled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewTransmission"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OraclePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayeeshipTransferRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayeeshipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemovedAccess"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequesterAccessControllerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoundRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorConfigSet"): EventFragment;
}
export interface AddedAccessEventObject {
    user: string;
}
export type AddedAccessEvent = TypedEvent<[string], AddedAccessEventObject>;
export type AddedAccessEventFilter = TypedEventFilter<AddedAccessEvent>;
export interface AnswerUpdatedEventObject {
    current: BigNumber;
    roundId: BigNumber;
    updatedAt: BigNumber;
}
export type AnswerUpdatedEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber
], AnswerUpdatedEventObject>;
export type AnswerUpdatedEventFilter = TypedEventFilter<AnswerUpdatedEvent>;
export interface BillingAccessControllerSetEventObject {
    old: string;
    current: string;
}
export type BillingAccessControllerSetEvent = TypedEvent<[
    string,
    string
], BillingAccessControllerSetEventObject>;
export type BillingAccessControllerSetEventFilter = TypedEventFilter<BillingAccessControllerSetEvent>;
export interface BillingSetEventObject {
    maximumGasPrice: number;
    reasonableGasPrice: number;
    microLinkPerEth: number;
    linkGweiPerObservation: number;
    linkGweiPerTransmission: number;
}
export type BillingSetEvent = TypedEvent<[
    number,
    number,
    number,
    number,
    number
], BillingSetEventObject>;
export type BillingSetEventFilter = TypedEventFilter<BillingSetEvent>;
export interface CheckAccessDisabledEventObject {
}
export type CheckAccessDisabledEvent = TypedEvent<[
], CheckAccessDisabledEventObject>;
export type CheckAccessDisabledEventFilter = TypedEventFilter<CheckAccessDisabledEvent>;
export interface CheckAccessEnabledEventObject {
}
export type CheckAccessEnabledEvent = TypedEvent<[
], CheckAccessEnabledEventObject>;
export type CheckAccessEnabledEventFilter = TypedEventFilter<CheckAccessEnabledEvent>;
export interface ConfigSetEventObject {
    previousConfigBlockNumber: number;
    configCount: BigNumber;
    signers: string[];
    transmitters: string[];
    threshold: number;
    encodedConfigVersion: BigNumber;
    encoded: string;
}
export type ConfigSetEvent = TypedEvent<[
    number,
    BigNumber,
    string[],
    string[],
    number,
    BigNumber,
    string
], ConfigSetEventObject>;
export type ConfigSetEventFilter = TypedEventFilter<ConfigSetEvent>;
export interface NewRoundEventObject {
    roundId: BigNumber;
    startedBy: string;
    startedAt: BigNumber;
}
export type NewRoundEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], NewRoundEventObject>;
export type NewRoundEventFilter = TypedEventFilter<NewRoundEvent>;
export interface NewTransmissionEventObject {
    aggregatorRoundId: number;
    answer: BigNumber;
    transmitter: string;
    observations: BigNumber[];
    observers: string;
    rawReportContext: string;
}
export type NewTransmissionEvent = TypedEvent<[
    number,
    BigNumber,
    string,
    BigNumber[],
    string,
    string
], NewTransmissionEventObject>;
export type NewTransmissionEventFilter = TypedEventFilter<NewTransmissionEvent>;
export interface OraclePaidEventObject {
    transmitter: string;
    payee: string;
    amount: BigNumber;
}
export type OraclePaidEvent = TypedEvent<[
    string,
    string,
    BigNumber
], OraclePaidEventObject>;
export type OraclePaidEventFilter = TypedEventFilter<OraclePaidEvent>;
export interface OwnershipTransferRequestedEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<[
    string,
    string
], OwnershipTransferRequestedEventObject>;
export type OwnershipTransferRequestedEventFilter = TypedEventFilter<OwnershipTransferRequestedEvent>;
export interface OwnershipTransferredEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface PayeeshipTransferRequestedEventObject {
    transmitter: string;
    current: string;
    proposed: string;
}
export type PayeeshipTransferRequestedEvent = TypedEvent<[
    string,
    string,
    string
], PayeeshipTransferRequestedEventObject>;
export type PayeeshipTransferRequestedEventFilter = TypedEventFilter<PayeeshipTransferRequestedEvent>;
export interface PayeeshipTransferredEventObject {
    transmitter: string;
    previous: string;
    current: string;
}
export type PayeeshipTransferredEvent = TypedEvent<[
    string,
    string,
    string
], PayeeshipTransferredEventObject>;
export type PayeeshipTransferredEventFilter = TypedEventFilter<PayeeshipTransferredEvent>;
export interface RemovedAccessEventObject {
    user: string;
}
export type RemovedAccessEvent = TypedEvent<[string], RemovedAccessEventObject>;
export type RemovedAccessEventFilter = TypedEventFilter<RemovedAccessEvent>;
export interface RequesterAccessControllerSetEventObject {
    old: string;
    current: string;
}
export type RequesterAccessControllerSetEvent = TypedEvent<[
    string,
    string
], RequesterAccessControllerSetEventObject>;
export type RequesterAccessControllerSetEventFilter = TypedEventFilter<RequesterAccessControllerSetEvent>;
export interface RoundRequestedEventObject {
    requester: string;
    configDigest: string;
    epoch: number;
    round: number;
}
export type RoundRequestedEvent = TypedEvent<[
    string,
    string,
    number,
    number
], RoundRequestedEventObject>;
export type RoundRequestedEventFilter = TypedEventFilter<RoundRequestedEvent>;
export interface ValidatorConfigSetEventObject {
    previousValidator: string;
    previousGasLimit: number;
    currentValidator: string;
    currentGasLimit: number;
}
export type ValidatorConfigSetEvent = TypedEvent<[
    string,
    number,
    string,
    number
], ValidatorConfigSetEventObject>;
export type ValidatorConfigSetEventFilter = TypedEventFilter<ValidatorConfigSetEvent>;
export interface AccessControlledOffchainAggregatorAbi extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AccessControlledOffchainAggregatorAbiInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        LINK(overrides?: CallOverrides): Promise<[string]>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        acceptPayeeship(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        billingAccessController(overrides?: CallOverrides): Promise<[string]>;
        checkEnabled(overrides?: CallOverrides): Promise<[boolean]>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        description(overrides?: CallOverrides): Promise<[string]>;
        disableAccessCheck(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        enableAccessCheck(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getBilling(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            number,
            number
        ] & {
            maximumGasPrice: number;
            reasonableGasPrice: number;
            microLinkPerEth: number;
            linkGweiPerObservation: number;
            linkGweiPerTransmission: number;
        }>;
        getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        hasAccess(_user: PromiseOrValue<string>, _calldata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;
        latestConfigDetails(overrides?: CallOverrides): Promise<[
            number,
            number,
            string
        ] & {
            configCount: number;
            blockNumber: number;
            configDigest: string;
        }>;
        latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;
        latestRoundData(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        latestTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;
        latestTransmissionDetails(overrides?: CallOverrides): Promise<[
            string,
            number,
            number,
            BigNumber,
            BigNumber
        ] & {
            configDigest: string;
            epoch: number;
            round: number;
            latestAnswer: BigNumber;
            latestTimestamp: BigNumber;
        }>;
        linkAvailableForPayment(overrides?: CallOverrides): Promise<[BigNumber] & {
            availableBalance: BigNumber;
        }>;
        maxAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;
        minAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;
        oracleObservationCount(_signerOrTransmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;
        owedPayment(_transmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        removeAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestNewRound(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requesterAccessController(overrides?: CallOverrides): Promise<[string]>;
        setBilling(_maximumGasPrice: PromiseOrValue<BigNumberish>, _reasonableGasPrice: PromiseOrValue<BigNumberish>, _microLinkPerEth: PromiseOrValue<BigNumberish>, _linkGweiPerObservation: PromiseOrValue<BigNumberish>, _linkGweiPerTransmission: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setBillingAccessController(_billingAccessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_signers: PromiseOrValue<string>[], _transmitters: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, _encodedConfigVersion: PromiseOrValue<BigNumberish>, _encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPayees(_transmitters: PromiseOrValue<string>[], _payees: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRequesterAccessController(_requesterAccessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setValidatorConfig(_newValidator: PromiseOrValue<string>, _newGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(_to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferPayeeship(_transmitter: PromiseOrValue<string>, _proposed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transmit(_report: PromiseOrValue<BytesLike>, _rs: PromiseOrValue<BytesLike>[], _ss: PromiseOrValue<BytesLike>[], _rawVs: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transmitters(overrides?: CallOverrides): Promise<[string[]]>;
        typeAndVersion(overrides?: CallOverrides): Promise<[string]>;
        validatorConfig(overrides?: CallOverrides): Promise<[string, number] & {
            validator: string;
            gasLimit: number;
        }>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
        withdrawFunds(_recipient: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawPayment(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    LINK(overrides?: CallOverrides): Promise<string>;
    acceptOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    acceptPayeeship(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    billingAccessController(overrides?: CallOverrides): Promise<string>;
    checkEnabled(overrides?: CallOverrides): Promise<boolean>;
    decimals(overrides?: CallOverrides): Promise<number>;
    description(overrides?: CallOverrides): Promise<string>;
    disableAccessCheck(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    enableAccessCheck(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getBilling(overrides?: CallOverrides): Promise<[
        number,
        number,
        number,
        number,
        number
    ] & {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
    }>;
    getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
    }>;
    getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    hasAccess(_user: PromiseOrValue<string>, _calldata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;
    latestConfigDetails(overrides?: CallOverrides): Promise<[
        number,
        number,
        string
    ] & {
        configCount: number;
        blockNumber: number;
        configDigest: string;
    }>;
    latestRound(overrides?: CallOverrides): Promise<BigNumber>;
    latestRoundData(overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
    }>;
    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
    latestTransmissionDetails(overrides?: CallOverrides): Promise<[
        string,
        number,
        number,
        BigNumber,
        BigNumber
    ] & {
        configDigest: string;
        epoch: number;
        round: number;
        latestAnswer: BigNumber;
        latestTimestamp: BigNumber;
    }>;
    linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;
    maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;
    minAnswer(overrides?: CallOverrides): Promise<BigNumber>;
    oracleObservationCount(_signerOrTransmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    owedPayment(_transmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    removeAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestNewRound(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requesterAccessController(overrides?: CallOverrides): Promise<string>;
    setBilling(_maximumGasPrice: PromiseOrValue<BigNumberish>, _reasonableGasPrice: PromiseOrValue<BigNumberish>, _microLinkPerEth: PromiseOrValue<BigNumberish>, _linkGweiPerObservation: PromiseOrValue<BigNumberish>, _linkGweiPerTransmission: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setBillingAccessController(_billingAccessController: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_signers: PromiseOrValue<string>[], _transmitters: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, _encodedConfigVersion: PromiseOrValue<BigNumberish>, _encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPayees(_transmitters: PromiseOrValue<string>[], _payees: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRequesterAccessController(_requesterAccessController: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setValidatorConfig(_newValidator: PromiseOrValue<string>, _newGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(_to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferPayeeship(_transmitter: PromiseOrValue<string>, _proposed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transmit(_report: PromiseOrValue<BytesLike>, _rs: PromiseOrValue<BytesLike>[], _ss: PromiseOrValue<BytesLike>[], _rawVs: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transmitters(overrides?: CallOverrides): Promise<string[]>;
    typeAndVersion(overrides?: CallOverrides): Promise<string>;
    validatorConfig(overrides?: CallOverrides): Promise<[string, number] & {
        validator: string;
        gasLimit: number;
    }>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    withdrawFunds(_recipient: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawPayment(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        LINK(overrides?: CallOverrides): Promise<string>;
        acceptOwnership(overrides?: CallOverrides): Promise<void>;
        acceptPayeeship(_transmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        addAccess(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        billingAccessController(overrides?: CallOverrides): Promise<string>;
        checkEnabled(overrides?: CallOverrides): Promise<boolean>;
        decimals(overrides?: CallOverrides): Promise<number>;
        description(overrides?: CallOverrides): Promise<string>;
        disableAccessCheck(overrides?: CallOverrides): Promise<void>;
        enableAccessCheck(overrides?: CallOverrides): Promise<void>;
        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getBilling(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            number,
            number
        ] & {
            maximumGasPrice: number;
            reasonableGasPrice: number;
            microLinkPerEth: number;
            linkGweiPerObservation: number;
            linkGweiPerTransmission: number;
        }>;
        getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hasAccess(_user: PromiseOrValue<string>, _calldata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;
        latestConfigDetails(overrides?: CallOverrides): Promise<[
            number,
            number,
            string
        ] & {
            configCount: number;
            blockNumber: number;
            configDigest: string;
        }>;
        latestRound(overrides?: CallOverrides): Promise<BigNumber>;
        latestRoundData(overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        latestTransmissionDetails(overrides?: CallOverrides): Promise<[
            string,
            number,
            number,
            BigNumber,
            BigNumber
        ] & {
            configDigest: string;
            epoch: number;
            round: number;
            latestAnswer: BigNumber;
            latestTimestamp: BigNumber;
        }>;
        linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;
        maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;
        minAnswer(overrides?: CallOverrides): Promise<BigNumber>;
        oracleObservationCount(_signerOrTransmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        owedPayment(_transmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        removeAccess(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        requestNewRound(overrides?: CallOverrides): Promise<BigNumber>;
        requesterAccessController(overrides?: CallOverrides): Promise<string>;
        setBilling(_maximumGasPrice: PromiseOrValue<BigNumberish>, _reasonableGasPrice: PromiseOrValue<BigNumberish>, _microLinkPerEth: PromiseOrValue<BigNumberish>, _linkGweiPerObservation: PromiseOrValue<BigNumberish>, _linkGweiPerTransmission: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setBillingAccessController(_billingAccessController: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setConfig(_signers: PromiseOrValue<string>[], _transmitters: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, _encodedConfigVersion: PromiseOrValue<BigNumberish>, _encoded: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setPayees(_transmitters: PromiseOrValue<string>[], _payees: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        setRequesterAccessController(_requesterAccessController: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setValidatorConfig(_newValidator: PromiseOrValue<string>, _newGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferPayeeship(_transmitter: PromiseOrValue<string>, _proposed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transmit(_report: PromiseOrValue<BytesLike>, _rs: PromiseOrValue<BytesLike>[], _ss: PromiseOrValue<BytesLike>[], _rawVs: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        transmitters(overrides?: CallOverrides): Promise<string[]>;
        typeAndVersion(overrides?: CallOverrides): Promise<string>;
        validatorConfig(overrides?: CallOverrides): Promise<[string, number] & {
            validator: string;
            gasLimit: number;
        }>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFunds(_recipient: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawPayment(_transmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddedAccess(address)"(user?: null): AddedAccessEventFilter;
        AddedAccess(user?: null): AddedAccessEventFilter;
        "AnswerUpdated(int256,uint256,uint256)"(current?: PromiseOrValue<BigNumberish> | null, roundId?: PromiseOrValue<BigNumberish> | null, updatedAt?: null): AnswerUpdatedEventFilter;
        AnswerUpdated(current?: PromiseOrValue<BigNumberish> | null, roundId?: PromiseOrValue<BigNumberish> | null, updatedAt?: null): AnswerUpdatedEventFilter;
        "BillingAccessControllerSet(address,address)"(old?: null, current?: null): BillingAccessControllerSetEventFilter;
        BillingAccessControllerSet(old?: null, current?: null): BillingAccessControllerSetEventFilter;
        "BillingSet(uint32,uint32,uint32,uint32,uint32)"(maximumGasPrice?: null, reasonableGasPrice?: null, microLinkPerEth?: null, linkGweiPerObservation?: null, linkGweiPerTransmission?: null): BillingSetEventFilter;
        BillingSet(maximumGasPrice?: null, reasonableGasPrice?: null, microLinkPerEth?: null, linkGweiPerObservation?: null, linkGweiPerTransmission?: null): BillingSetEventFilter;
        "CheckAccessDisabled()"(): CheckAccessDisabledEventFilter;
        CheckAccessDisabled(): CheckAccessDisabledEventFilter;
        "CheckAccessEnabled()"(): CheckAccessEnabledEventFilter;
        CheckAccessEnabled(): CheckAccessEnabledEventFilter;
        "ConfigSet(uint32,uint64,address[],address[],uint8,uint64,bytes)"(previousConfigBlockNumber?: null, configCount?: null, signers?: null, transmitters?: null, threshold?: null, encodedConfigVersion?: null, encoded?: null): ConfigSetEventFilter;
        ConfigSet(previousConfigBlockNumber?: null, configCount?: null, signers?: null, transmitters?: null, threshold?: null, encodedConfigVersion?: null, encoded?: null): ConfigSetEventFilter;
        "NewRound(uint256,address,uint256)"(roundId?: PromiseOrValue<BigNumberish> | null, startedBy?: PromiseOrValue<string> | null, startedAt?: null): NewRoundEventFilter;
        NewRound(roundId?: PromiseOrValue<BigNumberish> | null, startedBy?: PromiseOrValue<string> | null, startedAt?: null): NewRoundEventFilter;
        "NewTransmission(uint32,int192,address,int192[],bytes,bytes32)"(aggregatorRoundId?: PromiseOrValue<BigNumberish> | null, answer?: null, transmitter?: null, observations?: null, observers?: null, rawReportContext?: null): NewTransmissionEventFilter;
        NewTransmission(aggregatorRoundId?: PromiseOrValue<BigNumberish> | null, answer?: null, transmitter?: null, observations?: null, observers?: null, rawReportContext?: null): NewTransmissionEventFilter;
        "OraclePaid(address,address,uint256)"(transmitter?: null, payee?: null, amount?: null): OraclePaidEventFilter;
        OraclePaid(transmitter?: null, payee?: null, amount?: null): OraclePaidEventFilter;
        "OwnershipTransferRequested(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        OwnershipTransferRequested(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        "OwnershipTransferred(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "PayeeshipTransferRequested(address,address,address)"(transmitter?: PromiseOrValue<string> | null, current?: PromiseOrValue<string> | null, proposed?: PromiseOrValue<string> | null): PayeeshipTransferRequestedEventFilter;
        PayeeshipTransferRequested(transmitter?: PromiseOrValue<string> | null, current?: PromiseOrValue<string> | null, proposed?: PromiseOrValue<string> | null): PayeeshipTransferRequestedEventFilter;
        "PayeeshipTransferred(address,address,address)"(transmitter?: PromiseOrValue<string> | null, previous?: PromiseOrValue<string> | null, current?: PromiseOrValue<string> | null): PayeeshipTransferredEventFilter;
        PayeeshipTransferred(transmitter?: PromiseOrValue<string> | null, previous?: PromiseOrValue<string> | null, current?: PromiseOrValue<string> | null): PayeeshipTransferredEventFilter;
        "RemovedAccess(address)"(user?: null): RemovedAccessEventFilter;
        RemovedAccess(user?: null): RemovedAccessEventFilter;
        "RequesterAccessControllerSet(address,address)"(old?: null, current?: null): RequesterAccessControllerSetEventFilter;
        RequesterAccessControllerSet(old?: null, current?: null): RequesterAccessControllerSetEventFilter;
        "RoundRequested(address,bytes16,uint32,uint8)"(requester?: PromiseOrValue<string> | null, configDigest?: null, epoch?: null, round?: null): RoundRequestedEventFilter;
        RoundRequested(requester?: PromiseOrValue<string> | null, configDigest?: null, epoch?: null, round?: null): RoundRequestedEventFilter;
        "ValidatorConfigSet(address,uint32,address,uint32)"(previousValidator?: PromiseOrValue<string> | null, previousGasLimit?: null, currentValidator?: PromiseOrValue<string> | null, currentGasLimit?: null): ValidatorConfigSetEventFilter;
        ValidatorConfigSet(previousValidator?: PromiseOrValue<string> | null, previousGasLimit?: null, currentValidator?: PromiseOrValue<string> | null, currentGasLimit?: null): ValidatorConfigSetEventFilter;
    };
    estimateGas: {
        LINK(overrides?: CallOverrides): Promise<BigNumber>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        acceptPayeeship(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        billingAccessController(overrides?: CallOverrides): Promise<BigNumber>;
        checkEnabled(overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        description(overrides?: CallOverrides): Promise<BigNumber>;
        disableAccessCheck(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        enableAccessCheck(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getBilling(overrides?: CallOverrides): Promise<BigNumber>;
        getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hasAccess(_user: PromiseOrValue<string>, _calldata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;
        latestConfigDetails(overrides?: CallOverrides): Promise<BigNumber>;
        latestRound(overrides?: CallOverrides): Promise<BigNumber>;
        latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;
        latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        latestTransmissionDetails(overrides?: CallOverrides): Promise<BigNumber>;
        linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;
        maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;
        minAnswer(overrides?: CallOverrides): Promise<BigNumber>;
        oracleObservationCount(_signerOrTransmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owedPayment(_transmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        removeAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestNewRound(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requesterAccessController(overrides?: CallOverrides): Promise<BigNumber>;
        setBilling(_maximumGasPrice: PromiseOrValue<BigNumberish>, _reasonableGasPrice: PromiseOrValue<BigNumberish>, _microLinkPerEth: PromiseOrValue<BigNumberish>, _linkGweiPerObservation: PromiseOrValue<BigNumberish>, _linkGweiPerTransmission: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setBillingAccessController(_billingAccessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_signers: PromiseOrValue<string>[], _transmitters: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, _encodedConfigVersion: PromiseOrValue<BigNumberish>, _encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPayees(_transmitters: PromiseOrValue<string>[], _payees: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRequesterAccessController(_requesterAccessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setValidatorConfig(_newValidator: PromiseOrValue<string>, _newGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(_to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferPayeeship(_transmitter: PromiseOrValue<string>, _proposed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transmit(_report: PromiseOrValue<BytesLike>, _rs: PromiseOrValue<BytesLike>[], _ss: PromiseOrValue<BytesLike>[], _rawVs: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transmitters(overrides?: CallOverrides): Promise<BigNumber>;
        typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;
        validatorConfig(overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFunds(_recipient: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawPayment(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        LINK(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        acceptPayeeship(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        billingAccessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        checkEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        description(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        disableAccessCheck(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        enableAccessCheck(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBilling(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasAccess(_user: PromiseOrValue<string>, _calldata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestConfigDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestTransmissionDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        linkAvailableForPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oracleObservationCount(_signerOrTransmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owedPayment(_transmitter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeAccess(_user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestNewRound(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requesterAccessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setBilling(_maximumGasPrice: PromiseOrValue<BigNumberish>, _reasonableGasPrice: PromiseOrValue<BigNumberish>, _microLinkPerEth: PromiseOrValue<BigNumberish>, _linkGweiPerObservation: PromiseOrValue<BigNumberish>, _linkGweiPerTransmission: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setBillingAccessController(_billingAccessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_signers: PromiseOrValue<string>[], _transmitters: PromiseOrValue<string>[], _threshold: PromiseOrValue<BigNumberish>, _encodedConfigVersion: PromiseOrValue<BigNumberish>, _encoded: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPayees(_transmitters: PromiseOrValue<string>[], _payees: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRequesterAccessController(_requesterAccessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setValidatorConfig(_newValidator: PromiseOrValue<string>, _newGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(_to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferPayeeship(_transmitter: PromiseOrValue<string>, _proposed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transmit(_report: PromiseOrValue<BytesLike>, _rs: PromiseOrValue<BytesLike>[], _ss: PromiseOrValue<BytesLike>[], _rawVs: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transmitters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validatorConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFunds(_recipient: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawPayment(_transmitter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=AccessControlledOffchainAggregatorAbi.d.ts.map