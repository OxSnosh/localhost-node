import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface KeeperRegistrarAbiInterface extends utils.Interface {
    functions: {
        "LINK()": FunctionFragment;
        "acceptOwnership()": FunctionFragment;
        "approve(string,address,uint32,address,bytes,bytes32)": FunctionFragment;
        "cancel(bytes32)": FunctionFragment;
        "getAutoApproveAllowedSender(address)": FunctionFragment;
        "getPendingRequest(bytes32)": FunctionFragment;
        "getRegistrationConfig()": FunctionFragment;
        "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "register(string,bytes,address,uint32,address,bytes,uint96,uint8,address)": FunctionFragment;
        "setAutoApproveAllowedSender(address,bool)": FunctionFragment;
        "setRegistrationConfig(uint8,uint16,address,uint96)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "typeAndVersion()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "LINK" | "acceptOwnership" | "approve" | "cancel" | "getAutoApproveAllowedSender" | "getPendingRequest" | "getRegistrationConfig" | "onTokenTransfer" | "owner" | "register" | "setAutoApproveAllowedSender" | "setRegistrationConfig" | "transferOwnership" | "typeAndVersion"): FunctionFragment;
    encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "approve", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "cancel", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getAutoApproveAllowedSender", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getPendingRequest", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getRegistrationConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "onTokenTransfer", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "register", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setAutoApproveAllowedSender", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setRegistrationConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "typeAndVersion", values?: undefined): string;
    decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAutoApproveAllowedSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPendingRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegistrationConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onTokenTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAutoApproveAllowedSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRegistrationConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion", data: BytesLike): Result;
    events: {
        "AutoApproveAllowedSenderSet(address,bool)": EventFragment;
        "ConfigChanged(uint8,uint32,address,uint96)": EventFragment;
        "OwnershipTransferRequested(address,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RegistrationApproved(bytes32,string,uint256)": EventFragment;
        "RegistrationRejected(bytes32)": EventFragment;
        "RegistrationRequested(bytes32,string,bytes,address,uint32,address,bytes,uint96,uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AutoApproveAllowedSenderSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrationApproved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrationRejected"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrationRequested"): EventFragment;
}
export interface AutoApproveAllowedSenderSetEventObject {
    senderAddress: string;
    allowed: boolean;
}
export type AutoApproveAllowedSenderSetEvent = TypedEvent<[
    string,
    boolean
], AutoApproveAllowedSenderSetEventObject>;
export type AutoApproveAllowedSenderSetEventFilter = TypedEventFilter<AutoApproveAllowedSenderSetEvent>;
export interface ConfigChangedEventObject {
    autoApproveConfigType: number;
    autoApproveMaxAllowed: number;
    keeperRegistry: string;
    minLINKJuels: BigNumber;
}
export type ConfigChangedEvent = TypedEvent<[
    number,
    number,
    string,
    BigNumber
], ConfigChangedEventObject>;
export type ConfigChangedEventFilter = TypedEventFilter<ConfigChangedEvent>;
export interface OwnershipTransferRequestedEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<[
    string,
    string
], OwnershipTransferRequestedEventObject>;
export type OwnershipTransferRequestedEventFilter = TypedEventFilter<OwnershipTransferRequestedEvent>;
export interface OwnershipTransferredEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface RegistrationApprovedEventObject {
    hash: string;
    displayName: string;
    upkeepId: BigNumber;
}
export type RegistrationApprovedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], RegistrationApprovedEventObject>;
export type RegistrationApprovedEventFilter = TypedEventFilter<RegistrationApprovedEvent>;
export interface RegistrationRejectedEventObject {
    hash: string;
}
export type RegistrationRejectedEvent = TypedEvent<[
    string
], RegistrationRejectedEventObject>;
export type RegistrationRejectedEventFilter = TypedEventFilter<RegistrationRejectedEvent>;
export interface RegistrationRequestedEventObject {
    hash: string;
    name: string;
    encryptedEmail: string;
    upkeepContract: string;
    gasLimit: number;
    adminAddress: string;
    checkData: string;
    amount: BigNumber;
    source: number;
}
export type RegistrationRequestedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    number,
    string,
    string,
    BigNumber,
    number
], RegistrationRequestedEventObject>;
export type RegistrationRequestedEventFilter = TypedEventFilter<RegistrationRequestedEvent>;
export interface KeeperRegistrarAbi extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: KeeperRegistrarAbiInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        LINK(overrides?: CallOverrides): Promise<[string]>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        approve(name: PromiseOrValue<string>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        cancel(hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        getPendingRequest(hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, BigNumber]>;
        getRegistrationConfig(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            string,
            BigNumber
        ] & {
            autoApproveConfigType: number;
            autoApproveMaxAllowed: number;
            approvedCount: number;
            keeperRegistry: string;
            minLINKJuels: BigNumber;
        }>;
        onTokenTransfer(sender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        register(name: PromiseOrValue<string>, encryptedEmail: PromiseOrValue<BytesLike>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, amount: PromiseOrValue<BigNumberish>, source: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, allowed: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRegistrationConfig(autoApproveConfigType: PromiseOrValue<BigNumberish>, autoApproveMaxAllowed: PromiseOrValue<BigNumberish>, keeperRegistry: PromiseOrValue<string>, minLINKJuels: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        typeAndVersion(overrides?: CallOverrides): Promise<[string]>;
    };
    LINK(overrides?: CallOverrides): Promise<string>;
    acceptOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    approve(name: PromiseOrValue<string>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    cancel(hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    getPendingRequest(hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, BigNumber]>;
    getRegistrationConfig(overrides?: CallOverrides): Promise<[
        number,
        number,
        number,
        string,
        BigNumber
    ] & {
        autoApproveConfigType: number;
        autoApproveMaxAllowed: number;
        approvedCount: number;
        keeperRegistry: string;
        minLINKJuels: BigNumber;
    }>;
    onTokenTransfer(sender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    register(name: PromiseOrValue<string>, encryptedEmail: PromiseOrValue<BytesLike>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, amount: PromiseOrValue<BigNumberish>, source: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, allowed: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRegistrationConfig(autoApproveConfigType: PromiseOrValue<BigNumberish>, autoApproveMaxAllowed: PromiseOrValue<BigNumberish>, keeperRegistry: PromiseOrValue<string>, minLINKJuels: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    typeAndVersion(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        LINK(overrides?: CallOverrides): Promise<string>;
        acceptOwnership(overrides?: CallOverrides): Promise<void>;
        approve(name: PromiseOrValue<string>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        cancel(hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        getPendingRequest(hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, BigNumber]>;
        getRegistrationConfig(overrides?: CallOverrides): Promise<[
            number,
            number,
            number,
            string,
            BigNumber
        ] & {
            autoApproveConfigType: number;
            autoApproveMaxAllowed: number;
            approvedCount: number;
            keeperRegistry: string;
            minLINKJuels: BigNumber;
        }>;
        onTokenTransfer(sender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        register(name: PromiseOrValue<string>, encryptedEmail: PromiseOrValue<BytesLike>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, amount: PromiseOrValue<BigNumberish>, source: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, allowed: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setRegistrationConfig(autoApproveConfigType: PromiseOrValue<BigNumberish>, autoApproveMaxAllowed: PromiseOrValue<BigNumberish>, keeperRegistry: PromiseOrValue<string>, minLINKJuels: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        typeAndVersion(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "AutoApproveAllowedSenderSet(address,bool)"(senderAddress?: PromiseOrValue<string> | null, allowed?: null): AutoApproveAllowedSenderSetEventFilter;
        AutoApproveAllowedSenderSet(senderAddress?: PromiseOrValue<string> | null, allowed?: null): AutoApproveAllowedSenderSetEventFilter;
        "ConfigChanged(uint8,uint32,address,uint96)"(autoApproveConfigType?: null, autoApproveMaxAllowed?: null, keeperRegistry?: null, minLINKJuels?: null): ConfigChangedEventFilter;
        ConfigChanged(autoApproveConfigType?: null, autoApproveMaxAllowed?: null, keeperRegistry?: null, minLINKJuels?: null): ConfigChangedEventFilter;
        "OwnershipTransferRequested(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        OwnershipTransferRequested(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        "OwnershipTransferred(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "RegistrationApproved(bytes32,string,uint256)"(hash?: PromiseOrValue<BytesLike> | null, displayName?: null, upkeepId?: PromiseOrValue<BigNumberish> | null): RegistrationApprovedEventFilter;
        RegistrationApproved(hash?: PromiseOrValue<BytesLike> | null, displayName?: null, upkeepId?: PromiseOrValue<BigNumberish> | null): RegistrationApprovedEventFilter;
        "RegistrationRejected(bytes32)"(hash?: PromiseOrValue<BytesLike> | null): RegistrationRejectedEventFilter;
        RegistrationRejected(hash?: PromiseOrValue<BytesLike> | null): RegistrationRejectedEventFilter;
        "RegistrationRequested(bytes32,string,bytes,address,uint32,address,bytes,uint96,uint8)"(hash?: PromiseOrValue<BytesLike> | null, name?: null, encryptedEmail?: null, upkeepContract?: PromiseOrValue<string> | null, gasLimit?: null, adminAddress?: null, checkData?: null, amount?: null, source?: PromiseOrValue<BigNumberish> | null): RegistrationRequestedEventFilter;
        RegistrationRequested(hash?: PromiseOrValue<BytesLike> | null, name?: null, encryptedEmail?: null, upkeepContract?: PromiseOrValue<string> | null, gasLimit?: null, adminAddress?: null, checkData?: null, amount?: null, source?: PromiseOrValue<BigNumberish> | null): RegistrationRequestedEventFilter;
    };
    estimateGas: {
        LINK(overrides?: CallOverrides): Promise<BigNumber>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        approve(name: PromiseOrValue<string>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        cancel(hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getPendingRequest(hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegistrationConfig(overrides?: CallOverrides): Promise<BigNumber>;
        onTokenTransfer(sender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        register(name: PromiseOrValue<string>, encryptedEmail: PromiseOrValue<BytesLike>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, amount: PromiseOrValue<BigNumberish>, source: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, allowed: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRegistrationConfig(autoApproveConfigType: PromiseOrValue<BigNumberish>, autoApproveMaxAllowed: PromiseOrValue<BigNumberish>, keeperRegistry: PromiseOrValue<string>, minLINKJuels: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        LINK(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        approve(name: PromiseOrValue<string>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        cancel(hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPendingRequest(hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegistrationConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        onTokenTransfer(sender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        register(name: PromiseOrValue<string>, encryptedEmail: PromiseOrValue<BytesLike>, upkeepContract: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, adminAddress: PromiseOrValue<string>, checkData: PromiseOrValue<BytesLike>, amount: PromiseOrValue<BigNumberish>, source: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAutoApproveAllowedSender(senderAddress: PromiseOrValue<string>, allowed: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRegistrationConfig(autoApproveConfigType: PromiseOrValue<BigNumberish>, autoApproveMaxAllowed: PromiseOrValue<BigNumberish>, keeperRegistry: PromiseOrValue<string>, minLINKJuels: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=KeeperRegistrarAbi.d.ts.map