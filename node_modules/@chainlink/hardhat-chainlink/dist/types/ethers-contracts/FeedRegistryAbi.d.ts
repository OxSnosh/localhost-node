import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace FeedRegistryInterface {
    type PhaseStruct = {
        phaseId: PromiseOrValue<BigNumberish>;
        startingAggregatorRoundId: PromiseOrValue<BigNumberish>;
        endingAggregatorRoundId: PromiseOrValue<BigNumberish>;
    };
    type PhaseStructOutput = [number, BigNumber, BigNumber] & {
        phaseId: number;
        startingAggregatorRoundId: BigNumber;
        endingAggregatorRoundId: BigNumber;
    };
}
export interface FeedRegistryAbiInterface extends utils.Interface {
    functions: {
        "acceptOwnership()": FunctionFragment;
        "confirmFeed(address,address,address)": FunctionFragment;
        "decimals(address,address)": FunctionFragment;
        "description(address,address)": FunctionFragment;
        "getAccessController()": FunctionFragment;
        "getAnswer(address,address,uint256)": FunctionFragment;
        "getCurrentPhaseId(address,address)": FunctionFragment;
        "getFeed(address,address)": FunctionFragment;
        "getNextRoundId(address,address,uint80)": FunctionFragment;
        "getPhase(address,address,uint16)": FunctionFragment;
        "getPhaseFeed(address,address,uint16)": FunctionFragment;
        "getPhaseRange(address,address,uint16)": FunctionFragment;
        "getPreviousRoundId(address,address,uint80)": FunctionFragment;
        "getProposedFeed(address,address)": FunctionFragment;
        "getRoundData(address,address,uint80)": FunctionFragment;
        "getRoundFeed(address,address,uint80)": FunctionFragment;
        "getTimestamp(address,address,uint256)": FunctionFragment;
        "isFeedEnabled(address)": FunctionFragment;
        "latestAnswer(address,address)": FunctionFragment;
        "latestRound(address,address)": FunctionFragment;
        "latestRoundData(address,address)": FunctionFragment;
        "latestTimestamp(address,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "proposeFeed(address,address,address)": FunctionFragment;
        "proposedGetRoundData(address,address,uint80)": FunctionFragment;
        "proposedLatestRoundData(address,address)": FunctionFragment;
        "setAccessController(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "typeAndVersion()": FunctionFragment;
        "version(address,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "acceptOwnership" | "confirmFeed" | "decimals" | "description" | "getAccessController" | "getAnswer" | "getCurrentPhaseId" | "getFeed" | "getNextRoundId" | "getPhase" | "getPhaseFeed" | "getPhaseRange" | "getPreviousRoundId" | "getProposedFeed" | "getRoundData" | "getRoundFeed" | "getTimestamp" | "isFeedEnabled" | "latestAnswer" | "latestRound" | "latestRoundData" | "latestTimestamp" | "owner" | "proposeFeed" | "proposedGetRoundData" | "proposedLatestRoundData" | "setAccessController" | "transferOwnership" | "typeAndVersion" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "acceptOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "confirmFeed", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "decimals", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "description", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getAccessController", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAnswer", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getCurrentPhaseId", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getFeed", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getNextRoundId", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPhase", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPhaseFeed", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPhaseRange", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPreviousRoundId", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getProposedFeed", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getRoundData", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getRoundFeed", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getTimestamp", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "isFeedEnabled", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "latestAnswer", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "latestRound", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "latestRoundData", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "latestTimestamp", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "proposeFeed", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "proposedGetRoundData", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "proposedLatestRoundData", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setAccessController", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "typeAndVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "acceptOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "confirmFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccessController", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentPhaseId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNextRoundId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPhase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPhaseFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPhaseRange", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPreviousRoundId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProposedFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isFeedEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposeFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposedGetRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposedLatestRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAccessController", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "AccessControllerSet(address,address)": EventFragment;
        "FeedConfirmed(address,address,address,address,uint16,address)": EventFragment;
        "FeedProposed(address,address,address,address,address)": EventFragment;
        "OwnershipTransferRequested(address,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AccessControllerSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeedConfirmed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeedProposed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export interface AccessControllerSetEventObject {
    accessController: string;
    sender: string;
}
export type AccessControllerSetEvent = TypedEvent<[
    string,
    string
], AccessControllerSetEventObject>;
export type AccessControllerSetEventFilter = TypedEventFilter<AccessControllerSetEvent>;
export interface FeedConfirmedEventObject {
    asset: string;
    denomination: string;
    latestAggregator: string;
    previousAggregator: string;
    nextPhaseId: number;
    sender: string;
}
export type FeedConfirmedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    number,
    string
], FeedConfirmedEventObject>;
export type FeedConfirmedEventFilter = TypedEventFilter<FeedConfirmedEvent>;
export interface FeedProposedEventObject {
    asset: string;
    denomination: string;
    proposedAggregator: string;
    currentAggregator: string;
    sender: string;
}
export type FeedProposedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], FeedProposedEventObject>;
export type FeedProposedEventFilter = TypedEventFilter<FeedProposedEvent>;
export interface OwnershipTransferRequestedEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<[
    string,
    string
], OwnershipTransferRequestedEventObject>;
export type OwnershipTransferRequestedEventFilter = TypedEventFilter<OwnershipTransferRequestedEvent>;
export interface OwnershipTransferredEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface FeedRegistryAbi extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: FeedRegistryAbiInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        confirmFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        decimals(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;
        description(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getAccessController(overrides?: CallOverrides): Promise<[string]>;
        getAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            answer: BigNumber;
        }>;
        getCurrentPhaseId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number] & {
            currentPhaseId: number;
        }>;
        getFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            aggregator: string;
        }>;
        getNextRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nextRoundId: BigNumber;
        }>;
        getPhase(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            FeedRegistryInterface.PhaseStructOutput
        ] & {
            phase: FeedRegistryInterface.PhaseStructOutput;
        }>;
        getPhaseFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            aggregator: string;
        }>;
        getPhaseRange(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            startingRoundId: BigNumber;
            endingRoundId: BigNumber;
        }>;
        getPreviousRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            previousRoundId: BigNumber;
        }>;
        getProposedFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            proposedAggregator: string;
        }>;
        getRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, _roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        getRoundFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            aggregator: string;
        }>;
        getTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            timestamp: BigNumber;
        }>;
        isFeedEnabled(aggregator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        latestAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            answer: BigNumber;
        }>;
        latestRound(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            roundId: BigNumber;
        }>;
        latestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        latestTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            timestamp: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        proposeFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        proposedGetRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            id: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        proposedLatestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            id: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        setAccessController(_accessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        typeAndVersion(overrides?: CallOverrides): Promise<[string]>;
        version(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    acceptOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    confirmFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    decimals(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    description(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getAccessController(overrides?: CallOverrides): Promise<string>;
    getAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getCurrentPhaseId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    getFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getNextRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getPhase(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<FeedRegistryInterface.PhaseStructOutput>;
    getPhaseFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getPhaseRange(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        startingRoundId: BigNumber;
        endingRoundId: BigNumber;
    }>;
    getPreviousRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getProposedFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, _roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
    }>;
    getRoundFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    isFeedEnabled(aggregator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    latestAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    latestRound(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    latestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
    }>;
    latestTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    proposeFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    proposedGetRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        id: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
    }>;
    proposedLatestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        id: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
    }>;
    setAccessController(_accessController: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    typeAndVersion(overrides?: CallOverrides): Promise<string>;
    version(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        acceptOwnership(overrides?: CallOverrides): Promise<void>;
        confirmFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        decimals(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        description(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getAccessController(overrides?: CallOverrides): Promise<string>;
        getAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentPhaseId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        getFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getNextRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPhase(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<FeedRegistryInterface.PhaseStructOutput>;
        getPhaseFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getPhaseRange(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            startingRoundId: BigNumber;
            endingRoundId: BigNumber;
        }>;
        getPreviousRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getProposedFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, _roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        getRoundFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isFeedEnabled(aggregator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        latestAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        latestRound(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        latestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        latestTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        proposeFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        proposedGetRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            id: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        proposedLatestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            id: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }>;
        setAccessController(_accessController: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        typeAndVersion(overrides?: CallOverrides): Promise<string>;
        version(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "AccessControllerSet(address,address)"(accessController?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): AccessControllerSetEventFilter;
        AccessControllerSet(accessController?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): AccessControllerSetEventFilter;
        "FeedConfirmed(address,address,address,address,uint16,address)"(asset?: PromiseOrValue<string> | null, denomination?: PromiseOrValue<string> | null, latestAggregator?: PromiseOrValue<string> | null, previousAggregator?: null, nextPhaseId?: null, sender?: null): FeedConfirmedEventFilter;
        FeedConfirmed(asset?: PromiseOrValue<string> | null, denomination?: PromiseOrValue<string> | null, latestAggregator?: PromiseOrValue<string> | null, previousAggregator?: null, nextPhaseId?: null, sender?: null): FeedConfirmedEventFilter;
        "FeedProposed(address,address,address,address,address)"(asset?: PromiseOrValue<string> | null, denomination?: PromiseOrValue<string> | null, proposedAggregator?: PromiseOrValue<string> | null, currentAggregator?: null, sender?: null): FeedProposedEventFilter;
        FeedProposed(asset?: PromiseOrValue<string> | null, denomination?: PromiseOrValue<string> | null, proposedAggregator?: PromiseOrValue<string> | null, currentAggregator?: null, sender?: null): FeedProposedEventFilter;
        "OwnershipTransferRequested(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        OwnershipTransferRequested(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferRequestedEventFilter;
        "OwnershipTransferred(address,address)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        confirmFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        decimals(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        description(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getAccessController(overrides?: CallOverrides): Promise<BigNumber>;
        getAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentPhaseId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getNextRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPhase(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPhaseFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPhaseRange(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPreviousRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getProposedFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, _roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoundFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isFeedEnabled(aggregator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        latestAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        latestRound(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        latestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        latestTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        proposeFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        proposedGetRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        proposedLatestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        setAccessController(_accessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;
        version(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        acceptOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        confirmFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        decimals(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        description(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAccessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentPhaseId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getNextRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPhase(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPhaseFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPhaseRange(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, phaseId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPreviousRoundId(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProposedFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, _roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoundFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isFeedEnabled(aggregator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestAnswer(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestRound(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestTimestamp(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proposeFeed(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, aggregator: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        proposedGetRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proposedLatestRoundData(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setAccessController(_accessController: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(base: PromiseOrValue<string>, quote: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=FeedRegistryAbi.d.ts.map